<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自建Harbor镜像仓库</title>
      <link href="/post/6763f77d.html"/>
      <url>/post/6763f77d.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Harbor"><a href="#什么是Harbor" class="headerlink" title="什么是Harbor"></a>什么是Harbor</h2><p>Harbor 是由 VMware 公司中国团队为企业用户设计的 Registry server 开源项目，包括了权限管理(RBAC)、LDAP、审计、管理界面、自我注册、HA 等企业必需的功能，同时针对中国用户的特点，设计镜像复制和中文支持等功能</p><blockquote><p><a href="https://goharbor.io/">Harbor官方</a></p></blockquote><blockquote><p><a href="https://github.com/goharbor/harbor">Harbor Github项目</a></p></blockquote><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225145.png" alt="image-20210925170242718"></p><h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><ol><li>CentOS Linux release 7.8.2003 (Core)</li><li>Docker version 19.03.13</li><li>docker-compose version 1.24.1</li></ol><h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><blockquote><p><a href="https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz">二进制安装包下载地址</a></p></blockquote><p>二进制安装，所在节点操作</p><h4 id="下载并解压二进制包"><a href="#下载并解压二进制包" class="headerlink" title="下载并解压二进制包"></a>下载并解压二进制包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz<br>tar zxvf docker-19.03.9.tgz<br>mv docker/* /usr/bin<br></code></pre></td></tr></table></figure><h4 id="systemd管理docker"><a href="#systemd管理docker" class="headerlink" title="systemd管理docker"></a>systemd管理docker</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">cat &gt; /usr/lib/systemd/system/docker.service &lt;&lt; EOF<br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br>ExecStart=/usr/bin/dockerd<br>ExecReload=/bin/kill -s HUP $MAINPID<br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br>TimeoutStartSec=0<br>Delegate=yes<br>KillMode=process<br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br><br>[Install]<br>WantedBy=multi-user.target<br>EOF<br><br></code></pre></td></tr></table></figure><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mkdir /etc/docker<br>cat &gt; /etc/docker/daemon.json &lt;&lt; EOF<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://mirror.ccs.tencentyun.com&quot;]<br>&#125;<br>EOF<br>#阿里云镜像加速器 也可以替换成腾讯云的镜像加速<br><br></code></pre></td></tr></table></figure><h4 id="启动并设置开机启动"><a href="#启动并设置开机启动" class="headerlink" title="启动并设置开机启动"></a>启动并设置开机启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">systemctl daemon-reload<br>systemctl start docker<br>systemctl enable docker<br>systemctl status docker<br><br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225199.png" alt="image-20210417194150567"></p><h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h3><blockquote><p><a href="https://docs.docker.com/compose/install/">docker-compose官网文档介绍</a></p></blockquote><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><p>或者离线下载安装包我们可以从 Github 上下载它的二进制包来使用，<a href="https://github.com/docker/compose/releases">最新发行的版本地址</a></p><p>或通过命令行下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-(uname -s)−(uname -m)&quot; -o /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo chmod +x  /usr/local/bin/docker-compose<br>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><br>#docker-compose -v<br>Docker Compose version v2.10.2  #表示安装成功<br></code></pre></td></tr></table></figure><h3 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h3><p>通过命令行下载 或者直接在官方里面下载好的离线安装包，<a href="https://github.com/goharbor/harbor">下载地址</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># wget https://github.com/goharbor/harbor/releases/download/v2.1.4/harbor-offline-installer-v2.1.4.tgz<br><br># tar xvf harbor-offline-installer-v2.1.4.tgz<br></code></pre></td></tr></table></figure><p>根据需要修改相关参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># cd harbor<br># cp harbor.yml.tmpl harbor.yml  #默认是harbor.yml.tmpl需要将这个文件重命名一下<br># vi harbor.yml<br><br></code></pre></td></tr></table></figure><p> 如果没有域名，使用IP去访问，需要修改以下几项内容</p><blockquote><p>hostname:  修改成自建服务器IP</p><p>http.</p><p>   port: 端口</p><p>注释掉https相关配置项</p><p>harbor_admin_password:  harbor登陆密码</p></blockquote><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225247.png"></p><p>如果是使用域名，则需要配置https相关证书配置。如下</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042347183.png" alt="image-20220904234747105"></p><p>如果是生成环境使用，建议是修改下镜像存储的路径。默认是在&#x2F;data路径下</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042354868.png" alt="image-20220904235455817"></p><p>修改完配置后，确认无误执行如下命令进行安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">./install.sh<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225290.png" alt="image-20210510153221241"></p><p>有如上提示表示安装成功</p><h2 id="harbor基本使用"><a href="#harbor基本使用" class="headerlink" title="harbor基本使用"></a>harbor基本使用</h2><p>然后我们访问一下这个地址，如果是http的则可以直接使用hostname+http端口访问，用户名默认是：admin，密码就是配置文件里面那个harbor.yml文件里面harbor_admin_password值</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225339.png" alt="image-20210510155124472"></p><h3 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h3><p>可以添加其他仓管，以腾讯云TCR镜像仓库为例</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225383.png" alt="image-20210510155336022"></p><h3 id="复制管理"><a href="#复制管理" class="headerlink" title="复制管理"></a>复制管理</h3><p>复制管理 可以将本地镜像复制到其他镜像仓库，也可以将其他镜像仓库复制到本地</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225424.png" alt="image-20210510155605740"></p><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>您可以为不同类被镜像创建项目 或者为不同的项目组创建项目</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225472.png" alt="image-20210510155930055"></p><h3 id="仓库管理-1"><a href="#仓库管理-1" class="headerlink" title="仓库管理"></a>仓库管理</h3><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209042225508.png" alt="image-20210510160003817"></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm安装和使用</title>
      <link href="/post/e3ad72ca.html"/>
      <url>/post/e3ad72ca.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-安装Helm客户端"><a href="#一-安装Helm客户端" class="headerlink" title="一  安装Helm客户端"></a>一  安装Helm客户端</h3><blockquote><p>本文是通过二进制方式安装，如需其他方式可以参考官网文档</p><p>helm官方文档： <a href="https://helm.sh/zh/docs/intro/install/">https://helm.sh/zh/docs/intro/install/</a></p></blockquote><p>每个Helm <a href="https://github.com/helm/helm/releases">版本</a>都提供了各种操作系统的二进制版本，不同的版本可以手动下载和安装。</p><ol><li>下载 <a href="https://github.com/helm/helm/releases">需要的版本</a></li><li>解压(<code>tar -zxvf helm-v3.0.0-linux-amd64.tar.gz</code>)</li><li>在解压目中找到<code>helm</code>程序，移动到需要的目录中(<code>mv linux-amd64/helm /usr/local/bin/helm</code>)</li></ol><h3 id="二-添加helm仓库"><a href="#二-添加helm仓库" class="headerlink" title="二  添加helm仓库"></a>二  添加helm仓库</h3><p>以腾讯云TCR镜像仓库为例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#命令示例<br>#helm repo add $instance-$namespace https://$instance.tencentcloudcr.com/chartrepo/$namespace --username $username --password $instance-token<br><br>#实际操作示例，根据自己的参考修改对应的信息<br>#其中用户和密码 可以在控制台创建<br>#helm repo add  tke-pass-helm   https://tke-pass.tencentcloudcr.com/chartrepo/helm --username xxxxxxxx   --password  xxxxxx<br></code></pre></td></tr></table></figure><ul><li><p><code>$instance-$namespace</code>：为 helm repo 名称，建议使用<strong>实例名称+命名空间名称</strong>组合的方式命名，以便于区分各个实例及命名空间。</p></li><li><p>https:&#x2F;&#x2F;$instance.tencentcloudcr.com&#x2F;chartrepo&#x2F;$namespace：为 helm repo 的远端地址。</p></li><li><p><code>$username</code>：已获取的用户名。</p></li><li><p><code>$instance-token</code>：已获取的登录密码。</p><p>如添加成功将提示以下信息。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&quot;tcr-chen-helm&quot; has been added to your repositories<br></code></pre></td></tr></table></figure><p>使用该命令可以查看当前的helm 仓库信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># helm repo list<br>NAME                            URL                                                                                         <br>tcr-chen-helm                   https://tcr-chen.tencentcloudcr.com/chartrepo/helm<br></code></pre></td></tr></table></figure><h3 id="三-推送-Helm-Chart"><a href="#三-推送-Helm-Chart" class="headerlink" title="三 推送 Helm Chart"></a>三 推送 Helm Chart</h3><ol><li><p>安装 Helm Push 插件</p><blockquote><p>注意：请安装 0.9.0 及以上版本的 helm-push 插件，避免因版本不兼容等问题造成无法正常推送 helm chart。</p></blockquote><p>使用 Helm CLI 上传 Chart 包需要安装 helm-push 插件，该插件支持使用helm push 指令推送 helm chart 至指定 repo，同时支持上传目录及压缩包。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm plugin install https://github.com/chartmuseum/helm-push<br></code></pre></td></tr></table></figure></li><li><p>在节点上执行以下命令，创建一个 Chart。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm create  chart-demo<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令，可直接推送指定目录至 Chart 仓库（可选）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm push  chart-demo $instance-$namespace<br>#温馨提示高级版本使用的是cm-push命令<br>#helm cm-push chart-demo $instance-$namespace<br></code></pre></td></tr></table></figure><p>其中   $instance-$namespace  为已添加的本地仓库名称。</p></li><li><p>执行以下命令，可压缩指定目录，并推送至 Chart 仓库。</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">tar zcvf  chart-demo-1.0.0.tgz chart-demo/<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm push  chart-demo-1.0.0.tgz $instance-$namespace<br></code></pre></td></tr></table></figure><p>其中$instance-$namespace为已添加的本地仓库名称。</p></li></ol><h3 id="四-拉取-Helm-Chart"><a href="#四-拉取-Helm-Chart" class="headerlink" title="四 拉取 Helm Chart"></a>四 拉取 Helm Chart</h3><ol><li><p>在节点上执行以下命令，获取最新的 Chart 信息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm repo update<br></code></pre></td></tr></table></figure></li><li><p>执行以下命令，拉取指定版本 Helm Chart。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm fetch &lt;本地仓库名称&gt;/&lt;Chart 名称&gt; --version &lt;Chart 版本&gt;<br></code></pre></td></tr></table></figure><p>以从企业版实例 tcr-demo 中拉取命名空间 project-a 内 tcr-chart-demo 1.0.0 版本为例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm fetch tcr-chen-helm/chart-demo --version 1.0.0<br></code></pre></td></tr></table></figure></li></ol><h3 id="五-自建Harbor启用helmchart服务"><a href="#五-自建Harbor启用helmchart服务" class="headerlink" title="五 自建Harbor启用helmchart服务"></a>五 自建Harbor启用helmchart服务</h3><h4 id="1，安装-harbor-的-helmchart-repository"><a href="#1，安装-harbor-的-helmchart-repository" class="headerlink" title="1，安装 harbor 的 helmchart repository"></a><strong>1，安装 harbor 的 helmchart repository</strong></h4><p>默认新版 harbor 不会启用 chart repository service，如果需要自建的harbor管理 helm应用的话，需要在安装时添加额外的参数，例如：启用 chart repository service 服务的安装方式要添加一个参数 –with-chartmuseum</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-55-9-tlinux ~/docker-compose/harbor]# ./install.sh --with-chartmuseum<br></code></pre></td></tr></table></figure><p>安装完成后，会有这个提示 说明是安装成功：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">⠿ Container chartmuseum              Started <br></code></pre></td></tr></table></figure><h4 id="2，发布-helm-charts"><a href="#2，发布-helm-charts" class="headerlink" title="2，发布 helm charts"></a>2，发布 helm charts</h4><p><strong>方式一、基于dashboard 的可视化上传</strong></p><p>用户使用浏览器登录 harbor镜像仓库后，在对应的管理界面操作即可，如下图：</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/1652931750847.png" alt="1652931750847"></p><p><strong>方式二、基于命令行的 CLI 推送</strong></p><p>作为一个运维人员或者开发人员，更喜欢通过命令行方式推送和拉取helm，如下操作</p><p>1、安装插件</p><p>为了能使用命令推送，我们需要安装并使用 helm push 插件包，地址： <a href="https://github.com/chartmuseum/helm-push/releases">https://github.com/chartmuseum/helm-push/releases</a></p><p>a) 在线安装插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">helm plugin install https://github.com/chartmuseum/helm-pus<br></code></pre></td></tr></table></figure><p>b) 离线安装插件：</p><p>下载安装包 helm-push_0.10.1_linux_amd64.tar.gz，再使用命令 helm env 获取 HELM_PLUGINS 路径，然后放置和解压安装包，最后使用 helm plugin list 查看结果，如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-55-9-tlinux ~/harbor]# helm env | grep HELM_PLUGINS<br>HELM_PLUGINS=&quot;/root/.local/share/helm/plugins<br>[root@VM-55-9-tlinux ~/harbor]# mkdir -p /root/.local/share/helm/plugins/helm-push<br>[root@VM-55-9-tlinux ~/harbor]# mv helm-push_0.10.1_linux_amd64.tar.gz /root/.local/share/helm/plugins/helm-push/<br>[root@VM-55-9-tlinux ~/harbor]# cd /root/.local/share/helm/plugins/helm-push/<br>[root@VM-55-9-tlinux helm-push]# tar -xzvf helm-push_0.10.1_linux_amd64.tar.gz <br>[root@VM-55-9-tlinux helm-push]# helm plugin list<br>NAME    VERSION DESCRIPTION                  <br>cm-push 0.10.1  Push chart package to ChartMuseum<br><br></code></pre></td></tr></table></figure><p>2、添加 harbor 仓库到本地 helm 仓库列表</p><p>查看本地仓库列表(列出的是我已经添加其他仓库)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-55-9-tlinux ~/helm]# helm repo list<br>NAME            URL                                           <br>tke-pass-helm   https://tke-pass.tencentcloudcr.com/chartrepo/helm<br><br># 添加仓库地址到本地列表(其中 myharbor-helm 为这个仓库地址在 helm 本地的名称，连接是仓库URL，后面是登录 harbor 的用户名和密码)<br># URL格式：http(s)://&#123;harbor域名或iP:端口(如果默认443或80可不加)&#125;/chartrepo/&#123;yourHarborProjectName&#125;<br><br>[root@VM-55-9-tlinux ~/helm]# helm repo add myharbor-helm http://101.35.6.116:88/chartrepo/charts --username admin  --password xxxxxx<br><br>#有如下提示表示添加成功<br>&quot;myharbor-helm&quot; has been added to your repositories<br><br># 再查看(发现已添加成功)<br>[root@VM-55-9-tlinux ~/helm]# helm repo list<br>NAME            URL                                           <br>tke-pass-helm   https://tke-pass.tencentcloudcr.com/chartrepo/helm<br>myharbor-helm   http://101.35.6.116:88/chartrepo/charts<br><br>##更新本地仓库缓存内容<br>[root@VM-55-9-tlinux ~/helm]# helm repo update<br>Hang tight while we grab the latest from your chart repositories...<br>...Successfully got an update from the &quot;myharbor-helm&quot; chart repository<br>...Successfully got an update from the &quot;tke-pass-helm&quot; chart repository<br>Update Complete. ⎈Happy Helming!⎈<br></code></pre></td></tr></table></figure><blockquote><p>温馨提示：</p><p>1，harbor 仓库 URL 中的 chartrepo 是固定值。</p><p>2，在操作之前，请务必先在 harbor 中创建好项目，例如 charts即为先创建好的项目名称。</p><p>3，如果你还是搞不清这个URL，可以在harbor界面中上传一个外面下着的 chart 包，上次成功后进入这个 chart 详细页面，在 “概要这个Tab” 的最底部区域，harbor会告诉你在本地添加仓库的URL和命令。</p></blockquote><p>3、推送 chart 以及 chart 的更多操作</p><p>推送 chart 示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 推送chart文件夹方式<br>helm push mychartdemo myharbor-helm<br><br># 推送chart压缩包方式<br>helm push mychartdemo-1.0.1.tgz myharbor-helm<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Helm </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> Harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes容器资源限制和lxcfs问题</title>
      <link href="/post/e0d4c727.html"/>
      <url>/post/e0d4c727.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker容器资源限制问题"><a href="#Docker容器资源限制问题" class="headerlink" title="Docker容器资源限制问题"></a>Docker容器资源限制问题</h2><blockquote><p>以下是基于腾讯云TKE容器服务测试验证</p></blockquote><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Linux利用CGroup实现了对容器资源的限制，但是在容器内部还是默认挂载宿主机 &#x2F;proc 目录下的资源信息文件，如：meminfo,cpuinfo,stat,uptiem，等。当进入Containers执行free，df，top等命令的时候，这时候默认读取的是 &#x2F;proc 目录内的资源信息文件内容，而这些资源信息文件使用的是宿主机的，所以我们看到的是宿主机的使用信息。</p><h3 id="关于LXCFS"><a href="#关于LXCFS" class="headerlink" title="关于LXCFS"></a>关于LXCFS</h3><p>LXCFS是一个开源的FUSE（用户态文件系统），用来支持LXC容器，也支持Docker容器，社区中常用此工具来实现容器中的资源可见性。</p><p><strong>LXCFS原理：</strong></p><p>以内存资源为列：通过将宿主机的 &#x2F;var&#x2F;lib&#x2F;lxcfs&#x2F;meminfo 文件挂载到容器内的&#x2F;proc&#x2F;meminfo，然后LXCFS会从容器的CGroup中读取正确的内存限制，然后应用到 &#x2F;var&#x2F;lib&#x2F;lxcfs&#x2F;meminfo ，这时候容器内部从而就得到了正确的内存信息。</p><blockquote><p>说明：&#x2F;var&#x2F;lib&#x2F;lxcfs&#x2F;meminfo 是服务启动的时候默认指定的目录。 </p></blockquote><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>目前腾讯云TKE里面想实现对容器资源的限制，在容器里面执行free，df，top等命令的时候看到容器真正的资源，有两种方案</p><h4 id="方案一：目前-TencentOS-Server-特性已支持容器资源展示隔离"><a href="#方案一：目前-TencentOS-Server-特性已支持容器资源展示隔离" class="headerlink" title="方案一：目前 TencentOS Server 特性已支持容器资源展示隔离"></a>方案一：<strong>目前 <a href="https://github.com/Tencent/TencentOS-kernel/wiki/container-resource-view-isolation">TencentOS Server</a> 特性已支持容器资源展示隔离</strong></h4><ul><li>增加主机级开关：内核已实现了类似 LXCFS 特性。用户无需在节点部署 LXCFS 文件系统及修改 POD spec，仅需在节点开启全局开关（<code>sysctl -w kernel.stats_isolated=1</code>），<code>/proc/cpuinfo</code> 及 <code>/proc/meminfo</code> 等文件获取即可按容器隔离 </li><li>增加容器级开关：针对类似节点监控组件等特殊容器，增加了容器级开关 kernel.container_stats_isolated。在主机级开关开启时，仅需在容器启动脚本中关闭容器级开关（sysctl -w kernel.container_stats_isolated&#x3D;0），即可在容器中读取 &#x2F;proc&#x2F;cpuinfo 及 &#x2F;proc&#x2F;meminfo 文件时获取到主机信息。</li></ul><p><strong>1，环境准备</strong></p><p>已创建集群并添加节点，使用操作系统tlinux 2.4，节点规格4C8G</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~/lxcfs]# uname -r<br>4.14.105-19-0020.1<br>[root@VM-0-17-tlinux ~/lxcfs]# sysctl  -a| grep kernel.stats_isolated<br>kernel.stats_isolated = 0<br><br>#默认是0<br></code></pre></td></tr></table></figure><p><strong>2，查看当前主机节点上资源情况</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~/lxcfs]# cat /proc/meminfo | grep MemTotal<br>MemTotal:        8035132 kB<br>[root@VM-0-17-tlinux ~/lxcfs]# cat /proc/cpuinfo  | grep processor | wc -l<br>4<br>[root@VM-0-17-tlinux ~/lxcfs]# free -m<br>              total        used        free      shared  buff/cache   available<br>Mem:           7846        2394        2571           2        2880        5299<br>Swap:             0           0           0<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041912729.png" alt="1627827269129"></p><p><strong>3，未修改前登录容器查看资源，看到的是宿主机的使用信息。</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~/lxcfs]# kubectl  exec -it centos-5ccb64bbdb-h7nb9  -- /bin/bash<br>[root@centos-5ccb64bbdb-h7nb9 /]# cat /proc/meminfo | grep MemTotal<br>MemTotal:        8035132 kB<br>[root@centos-5ccb64bbdb-h7nb9 /]# cat /proc/cpuinfo  | grep processor | wc -l<br>4<br>[root@centos-5ccb64bbdb-h7nb9 /]# free -m<br>              total        used        free      shared  buff/cache   available<br>Mem:           7846        2409        2555           2        2881        5285<br>Swap:             0           0           0<br></code></pre></td></tr></table></figure><p><strong>4， 开启全局开关  （<code>sysctl -w kernel.stats_isolated=1</code>）</strong> </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~]# sysctl -w kernel.stats_isolated=1<br>kernel.stats_isolated = 1<br>[root@VM-0-17-tlinux ~]# sysctl  -p<br></code></pre></td></tr></table></figure><p><strong>5，进一步查看容器资源情况</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@centos-5ccb64bbdb-h7nb9 /]# cat /proc/meminfo | grep MemTotal<br>MemTotal:        1048576 kB<br>[root@centos-5ccb64bbdb-h7nb9 /]# cat /proc/cpuinfo  | grep processor | wc -l<br>1<br>[root@centos-5ccb64bbdb-h7nb9 /]# free -m<br>              total        used        free      shared  buff/cache   available<br>Mem:           1024           4        1014           0           4         934<br>Swap:          1024           0        1024<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041912725.png" alt="1627827658184"></p><p><strong>5，低内核版本不支持该参数</strong></p><blockquote><p>另外一个节点   操作系统是centos 内核版本是 3.10</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-2-46-centos ~]# sysctl -w kernel.stats_isolated=1<br>sysctl: cannot stat /proc/sys/kernel/stats_isolated: No such file or directory<br>[root@VM-2-46-centos ~]# uname -a<br>Linux VM-2-46-centos 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913987.png" alt="1627828366685"></p><h4 id="方案二-使用LXCFS"><a href="#方案二-使用LXCFS" class="headerlink" title="方案二:使用LXCFS"></a>方案二:使用LXCFS</h4><blockquote><p><a href="https://github.com/denverdino/lxcfs-admission-webhook">lxcfs官方介绍</a></p></blockquote><p>在节点上安装LXCFS ， 通过将宿主机的 &#x2F;var&#x2F;lib&#x2F;lxcfs&#x2F;meminfo 文件挂载到容器内的&#x2F;proc&#x2F;meminfo，然后LXCFS会从容器的CGroup中读取正确的内存限制，然后应用到 &#x2F;var&#x2F;lib&#x2F;lxcfs&#x2F;meminfo ，这时候容器内部从而就得到了正确的内存信息 </p><p><strong>1，环境准备 （ node节点OS：centos 7.6 ）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#安装依赖<br>yum install -y fuse-libs<br>git  clone https://github.com/denverdino/lxcfs-admission-webhook.git<br>cd  lxcfs-admission-webhook<br></code></pre></td></tr></table></figure><p><strong>2，部署安装</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#部署lxcfs daemonset<br>kubectl  apply -f deployment/lxcfs-daemonset.yaml<br>#部署lxcfs admission webhook<br>#sh  deployment/install.sh  #删除的话使用sh  deployment/uninstall.sh <br>#执行kubectl get po ，确认所有pod都处于Running状态<br>[root@VM-2-46-centos lxcfs-admission-webhook]# kubectl  get pods  | grep lxcfs<br>lxcfs-4bjxh                                           1/1     Running   0          8m44s<br>lxcfs-56225                                           1/1     Running   0          8m44s<br>lxcfs-admission-webhook-deployment-58d6fdcf49-jmxd9   1/1     Running   0          8m3s<br>lxcfs-f2gt5                                           1/1     Running   0          8m44s<br>lxcfs-h6smp                                           1/1     Running   0          8m44s<br></code></pre></td></tr></table></figure><p><strong>3，验证效果，启动lxcfs</strong></p><p> 对于要使用 lxcfs 的namespace，使用如下命令启用lxcfs admission webhook的自动注入（以lxcf为例）： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl label namespace lxcfs  lxcfs-admission-webhook=enabled<br>kubectl  get ns --show-labels<br>kubectl  get pods -n lxcfs<br><br>#部署POD到centos 7.6 节点上<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913268.png" alt="1627830668749"></p><p>确认内存信息</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913663.png" alt="1627830753483"></p><p>确认CPU信息</p><blockquote><p>如果pod设置了cpu limit，看到cpu数量为cpu limit值向上取整</p></blockquote><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913204.png" alt="1627830843444"></p><p><strong>4，卸载清理lxcfs</strong></p><p> 清理 lxcfs-admission-webhook </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">deployment/uninstall.sh<br></code></pre></td></tr></table></figure><p> 清理 lxcfs </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl delete -f deployment/lxcfs-daemonset.yaml<br></code></pre></td></tr></table></figure><p>lxcfs 支持容器镜像 Centos系统、Ubuntu系统、Debian系统，但是不支持容器镜像 Alpine系统。因为 Alpine 不是使用 Gnu libc，而是使用 musl libc</p><h4 id="附注：1-12-TKE集群版本集群验证"><a href="#附注：1-12-TKE集群版本集群验证" class="headerlink" title="附注：1.12 TKE集群版本集群验证"></a>附注：1.12 TKE集群版本集群验证</h4><blockquote><p>在一次处理客户问题时候，客户咨询1.12版本是否支持lxcfs ，所做以下验证，仅作为记录</p></blockquote><p><strong>1，环境准备</strong></p><ul><li><p>centos7.6.0_x64 </p></li><li><p>集群版本1.12</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-2-2-centos ~]# cat /etc/redhat-release <br>CentOS Linux release 7.6.1810 (Core) <br>[root@VM-2-2-centos ~]# kubectl  get nodes -o wide<br>NAME       STATUS   ROLES    AGE   VERSION          INTERNAL-IP   EXTERNAL-IP       OS-IMAGE                KERNEL-VERSION                CONTAINER-RUNTIME<br>10.1.2.2   Ready    &lt;none&gt;   18m   v1.12.4-tke.29   10.1.2.2      114.117.211.163   CentOS Linux 7 (Core)   3.10.0-1160.11.1.el7.x86_64   docker://19.3.9<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913476.png" alt="1628694819462"></p><p><strong>2，查看当前主机资源情况</strong>**</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913463.png" alt="1628694227083"></p><p><strong>3，未安装lxcfs之前部署POD</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">resources:<br>  limits:<br>    cpu: 800m<br>    memory: 1Gi<br>  requests:<br>    cpu: 200m<br>    memory: 256Mi<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041913087.png" alt="1628694282800"></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914606.png" alt="1628694413673"></p><p><strong>4，安装lxcfs组件 并查看是否成功</strong></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914350.png" alt="1628694556172"></p><p><strong>45，测试，销毁刚才创建的工作负载</strong></p><p><strong>5，登录POD里面查看资源</strong></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914545.png" alt="1628695298213"></p><p><strong>6 ，CPU 1:2  内存1:1</strong></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914300.png" alt="1628695390761"></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914669.png" alt="1628695575243"></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914339.png" alt="1628695524786"></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041914326.png" alt="1628695619794"></p><p>参考链接：</p><ul><li><a href="https://github.com/denverdino/lxcfs-admission-webhook">https://github.com/denverdino/lxcfs-admission-webhook</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes部署主从架构Mysql集群</title>
      <link href="/post/24ba3d3c.html"/>
      <url>/post/24ba3d3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>随着kubernetes发展，越来越多的人开始使用kubernetes部署自己应用，它是容器集群管理系统，是一个开源的平台，可以实现容器集群的自动化部署、自动扩缩容、维护等功能，然而很多应用也使用到数据库，下面通过kubernetes上部署个主从架构的Mysql集群供应用使用</p></blockquote><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>kubernetes集群（本次实验使用的是腾讯云TKE集群，版本1.18）</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>主要通过一下几个步骤完整的搭建一个MySQL集群</p><ol><li>搭建一个<code>主从复制</code>（Master-Slave）的MySQL集群</li><li>从节点可以进行水平扩展，扩容多个节点</li><li>所有的<code>写</code>操作只能在MySQL主节点上执行</li><li>读操作可以在MySQL主从节点上执行</li><li>从节点能自动同步主节点的数据</li></ol><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209041753863.png" alt="image-20211125204741527"></p><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><p>1，创建mysql使用的Namespace（如果不创建可以使用默认命名空间，一般建议单独给数据创建个命名空间使用）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: Namespace<br>metadata:<br>  name: mysql<br>  labels:<br>    app: mysql<br></code></pre></td></tr></table></figure><p>2，创建数据库的配置文件configmap</p><p>使用ConfigMap为Master&#x2F;Slave节点分配不同的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: mysql<br>  namespace: mysql<br>  labels:<br>    app: mysql<br>data:<br>  master.cnf: |<br>    # Master主节点配置<br>    [mysqld]<br>    log-bin=mysqllog<br>    skip-name-resolve<br>  slave.cnf: |<br>    # Slave从节点配置<br>    [mysqld]<br>    super-read-only<br>    skip-name-resolve<br>    log-bin=mysql-bin<br>    replicate-ignore-db=mysql<br></code></pre></td></tr></table></figure><p>3，创建MySQL密码Secret</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: mysql-secret<br>  namespace: mysql<br>  labels:<br>    app: mysql<br>type: Opaque<br>data:<br>  password: MTIzNDU2   # echo -n &quot;123456&quot; | base64<br></code></pre></td></tr></table></figure><p>4，使用Service为MySQL提供读写分离</p><ul><li>用户所有写请求，必须以DNS记录的方式直接访问到Master节点，也就是mysql-0.mysql这条DNS记录。</li><li>用户所有读请求，必须访问自动分配的DNS记录可以被转发到任意一个Master或Slave节点上，也就是mysql-read这条DNS记录。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: mysql<br>  namespace: mysql<br>  labels:<br>    app: mysql<br>spec:<br>  ports:<br>  - name: mysql<br>    port: 3306<br>  clusterIP: None<br>  selector:<br>    app: mysql<br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: mysql-read<br>  namespace: mysql<br>  labels:<br>    app: mysql<br>spec:<br>  ports:<br>  - name: mysql<br>    port: 3306<br>  selector:<br>    app: mysql<br></code></pre></td></tr></table></figure><p>5，创建MySQL集群实例</p><p>使用StatefulSet搭建MySQL主从集群</p><p>整体的StatefulSet有两个Replicas，一个Master，一个Slave，然后使用<code>init-mysql</code>这个<code>initContainers</code>进行<code>配置文件的初始化</code>。接着使用<code>clone-mysql</code>这个<code>initContainers</code>进行<code>数据的传输</code>；同时使用<code>xtrabackup</code>这个**<code>sidecar</code>容器**进行<code>SQL初始化和数据传输功能</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: mysql<br>  namespace: mysql<br>  labels:<br>    app: mysql<br>spec:<br>  selector:<br>    matchLabels:<br>      app: mysql<br>  serviceName: mysql    #注意这个千万别少些<br>  replicas: 2<br>  template:<br>    metadata:<br>      labels:<br>        app: mysql<br>    spec:<br>      initContainers:<br>      - name: init-mysql<br>        image: mysql:5.7<br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - &quot;-c&quot;<br>        - |<br>          set -ex<br>          # 从Pod的序号，生成server-id<br>          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1<br>          ordinal=$&#123;BASH_REMATCH[1]&#125;<br>          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf<br>          # 由于server-id不能为0，因此给ID加100来避开它<br>          echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf<br>          # 如果Pod的序号为0，说明它是Master节点，从ConfigMap里把Master的配置文件拷贝到/mnt/conf.d目录下<br>          # 否则，拷贝ConfigMap里的Slave的配置文件<br>          if [[ $&#123;ordinal&#125; -eq 0 ]]; then<br>            cp /mnt/config-map/master.cnf /mnt/conf.d<br>          else<br>            cp /mnt/config-map/slave.cnf /mnt/conf.d<br>          fi<br>        volumeMounts:<br>        - name: conf<br>          mountPath: /mnt/conf.d<br>        - name: config-map<br>          mountPath: /mnt/config-map<br>      - name: clone-mysql<br>        image: gcr.tencentcloudcr.com/google-samples/xtrabackup:1.0   #使用腾讯镜像加速<br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - &quot;-c&quot;<br>        - |<br>          set -ex<br>          # 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过<br>          [[ -d /var/lib/mysql/mysql ]] &amp;&amp; exit 0<br>          # Master 节点（序号为 0）不需要这个操作<br>          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1<br>          ordinal=$&#123;BASH_REMATCH[1]&#125;<br>          [[ $ordinal == 0 ]] &amp;&amp; exit 0<br>          # 使用ncat指令，远程地从前一个节点拷贝数据到本地<br>          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql<br>          # 执行 --prepare，这样拷贝来的数据就可以用作恢复了<br>          xtrabackup --prepare --target-dir=/var/lib/mysql<br>        volumeMounts:<br>        - name: data<br>          mountPath: /var/lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: /etc/mysql/conf.d<br>      containers:<br>      - name: mysql<br>        image: mysql:5.7<br>        env:<br> #        - name: MYSQL_ALLOW_EMPTY_PASSWORD<br> #          value: &quot;1&quot;<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        ports:<br>        - name: mysql<br>          containerPort: 3306<br>        volumeMounts:<br>        - name: data<br>          mountPath: /var/lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: /etc/mysql/conf.d<br>        resources:<br>          requests:<br>            cpu: 500m<br>            memory: 1Gi<br>        livenessProbe:<br>          exec:<br>            command: [&quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-uroot&quot;, &quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;]<br>          initialDelaySeconds: 30<br>          periodSeconds: 10<br>          timeoutSeconds: 5<br>        readinessProbe:<br>          exec:<br>            command: [&quot;mysqladmin&quot;, &quot;ping&quot;, &quot;-uroot&quot;, &quot;-p$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;]<br>          initialDelaySeconds: 5<br>          periodSeconds: 2<br>          timeoutSeconds: 1<br>      - name: xtrabackup<br>        image: gcr.tencentcloudcr.com/google-samples/xtrabackup:1.0<br>        ports:<br>        - name: xtrabackup<br>          containerPort: 3307<br>        env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          valueFrom:<br>            secretKeyRef:<br>              name: mysql-secret<br>              key: password<br>        command:<br>        - bash<br>        - &quot;-c&quot;<br>        - |<br>          set -ex<br>          cd /var/lib/mysql<br>          # 从备份信息文件里读取MASTER_LOG_FILE和MASTER_LOG_POS这2个字段的值，用来拼装集群初始化SQL<br>          if [[ -f xtrabackup_slave_info ]]; then<br>            # 如果xtrabackup_slave_info文件存在，说明这个备份数据来自于另一个Slave节点<br>            # 这种情况下，XtraBackup工具在备份的时候，就已经在这个文件里自动生成了“CHANGE MASTER TO”SQL语句<br>            # 所以，只需要把这个文件重命名为change_master_to.sql.in，后面直接使用即可<br>            mv xtrabackup_slave_info change_master_to.sql.in<br>            # 所以，也就用不着xtrabackup_binlog_info了<br>            rm -f xtrabackup_binlog_info<br>          elif [[ -f xtrabackup_binlog_info ]]; then<br>            # 如果只是存在xtrabackup_binlog_info文件，说明备份来自于Master节点，就需要解析这个备份信息文件，读取所需的两个字段的值<br>            [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1<br>            rm xtrabackup_binlog_info<br>            # 把两个字段的值拼装成SQL，写入change_master_to.sql.in文件<br>            echo &quot;CHANGE MASTER TO MASTER_LOG_FILE=&#x27;$&#123;BASH_REMATCH[1]&#125;&#x27;,\<br>                  MASTER_LOG_POS=$&#123;BASH_REMATCH[2]&#125;&quot; &gt; change_master_to.sql.in<br>          fi<br>          # 如果存在change_master_to.sql.in，就意味着需要做集群初始化工作<br>          if [[ -f change_master_to.sql.in ]]; then<br>            # 但一定要先等MySQL容器启动之后才能进行下一步连接MySQL的操作<br>            echo &quot;Waiting for mysqld to be ready（accepting connections）&quot;<br>            until mysql -h 127.0.0.1 -uroot -p$&#123;MYSQL_ROOT_PASSWORD&#125; -e &quot;SELECT 1&quot;; do sleep 1; done<br>            echo &quot;Initializing replication from clone position&quot;<br>            # 将文件change_master_to.sql.in改个名字<br>            # 防止这个Container重启的时候，因为又找到了change_master_to.sql.in，从而重复执行一遍初始化流程<br>            mv change_master_to.sql.in change_master_to.sql.orig<br>            # 使用change_master_to.sql.orig的内容，也就是前面拼装的SQL，组成一个完整的初始化和启动Slave的SQL语句<br>            mysql -h 127.0.0.1 -uroot -p$&#123;MYSQL_ROOT_PASSWORD&#125; &lt;&lt; EOF<br>          $(&lt; change_master_to.sql.orig),<br>            MASTER_HOST=&#x27;mysql-0.mysql.mysql&#x27;,<br>            MASTER_USER=&#x27;root&#x27;,<br>            MASTER_PASSWORD=&#x27;$&#123;MYSQL_ROOT_PASSWORD&#125;&#x27;,<br>            MASTER_CONNECT_RETRY=10;<br>          START SLAVE;<br>          EOF<br>          fi<br>          # 使用ncat监听3307端口。<br>          # 它的作用是，在收到传输请求的时候，直接执行xtrabackup --backup命令，备份MySQL的数据并发送给请求者<br>          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \<br>            &quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=$&#123;MYSQL_ROOT_PASSWORD&#125;&quot;<br>        volumeMounts:<br>        - name: data<br>          mountPath: /var/lib/mysql<br>          subPath: mysql<br>        - name: conf<br>          mountPath: /etc/mysql/conf.d<br>      volumes:<br>      - name: conf<br>        emptyDir: &#123;&#125;<br>      - name: config-map<br>        configMap:<br>          name: mysql<br>  volumeClaimTemplates:<br>  - metadata:<br>      name: data<br>    spec:<br>      accessModes:<br>      - &quot;ReadWriteOnce&quot;<br>      storageClassName: cbs<br>      resources:<br>        requests:<br>          storage: 10Gi            #数据盘大小根据业务情况镜像修改，这个只做测试，只写了10Gi <br></code></pre></td></tr></table></figure><p>可以看到，StatefulSet启动成功后，会有两个Pod运行。接下来，我们可以尝试向这个MySQL集群发起请求，执行一些SQL操作来验证它是否正常。整个过程因为拉取mysql和一个<code>gcr.io/google-samples/xtrabackup:1.0</code>（使用腾讯云加速镜像地址gcr.tencentcloudcr.com）国外的镜像会很慢,但是在创建mysql-0拉取一次之后，后续创建mysql-1就相对很快了。</p><p>最后，容器检查pod的运行状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~]# kubectl  get all -n mysql  -o wide<br>NAME          READY   STATUS    RESTARTS   AGE    IP           NODE           NOMINATED NODE   READINESS GATES<br>pod/mysql-0   2/2     Running   0          108s   172.18.1.4   192.168.2.40   &lt;none&gt;           &lt;none&gt;<br>pod/mysql-1   2/2     Running   0          76s    172.18.1.5   192.168.2.40   &lt;none&gt;           &lt;none&gt;<br><br>NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE     SELECTOR<br>service/mysql        ClusterIP   None             &lt;none&gt;        3306/TCP   2m24s   app=mysql<br>service/mysql-read   ClusterIP   172.18.253.108   &lt;none&gt;        3306/TCP   2m24s   app=mysql<br><br>NAME                     READY   AGE    CONTAINERS         IMAGES<br>statefulset.apps/mysql   2/2     108s   mysql,xtrabackup   mysql:5.7,gcr.tencentcloudcr.com/google-samples/xtrabackup:1.0<br></code></pre></td></tr></table></figure><h3 id="服务验证"><a href="#服务验证" class="headerlink" title="服务验证"></a>服务验证</h3><p>1，验证主从关系</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~]# kubectl -n mysql exec mysql-1 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;show slave status \G&#x27;&quot;<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>*************************** 1. row ***************************<br>               Slave_IO_State: Waiting for master to send event<br>                  Master_Host: mysql-0.mysql.mysql<br>                  Master_User: root<br>                  Master_Port: 3306<br>                Connect_Retry: 10<br>              Master_Log_File: mysqllog.000003<br>          Read_Master_Log_Pos: 154<br>               Relay_Log_File: mysql-1-relay-bin.000002<br>                Relay_Log_Pos: 319<br>        Relay_Master_Log_File: mysqllog.000003<br>             Slave_IO_Running: Yes<br>            Slave_SQL_Running: Yes<br>              Replicate_Do_DB: <br>          Replicate_Ignore_DB: mysql<br>           Replicate_Do_Table: <br>       Replicate_Ignore_Table: <br>      Replicate_Wild_Do_Table: <br>  Replicate_Wild_Ignore_Table: <br>                   Last_Errno: 0<br>                   Last_Error: <br>                 Skip_Counter: 0<br>          Exec_Master_Log_Pos: 154<br>              Relay_Log_Space: 528<br>              Until_Condition: None<br>               Until_Log_File: <br>                Until_Log_Pos: 0<br>           Master_SSL_Allowed: No<br>           Master_SSL_CA_File: <br>           Master_SSL_CA_Path: <br>              Master_SSL_Cert: <br>            Master_SSL_Cipher: <br>               Master_SSL_Key: <br>        Seconds_Behind_Master: 0<br>Master_SSL_Verify_Server_Cert: No<br>                Last_IO_Errno: 0<br>                Last_IO_Error: <br>               Last_SQL_Errno: 0<br>               Last_SQL_Error: <br>  Replicate_Ignore_Server_Ids: <br>             Master_Server_Id: 100<br>                  Master_UUID: f8d3bd9a-4df4-11ec-9930-52d15f478b07<br>             Master_Info_File: /var/lib/mysql/master.info<br>                    SQL_Delay: 0<br>          SQL_Remaining_Delay: NULL<br>      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates<br>           Master_Retry_Count: 86400<br>                  Master_Bind: <br>      Last_IO_Error_Timestamp: <br>     Last_SQL_Error_Timestamp: <br>               Master_SSL_Crl: <br>           Master_SSL_Crlpath: <br>           Retrieved_Gtid_Set: <br>            Executed_Gtid_Set: <br>                Auto_Position: 0<br>         Replicate_Rewrite_DB: <br>                 Channel_Name: <br>           Master_TLS_Version: <br></code></pre></td></tr></table></figure><p>2，接下来，我们通过Master容器创建数据库和表、插入数据库。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl -n mysql exec mysql-0 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;create database test&#x27;&quot;<br>kubectl -n mysql exec mysql-0 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;use test;create table counter(c int);&#x27;&quot;<br>kubectl -n mysql exec mysql-0 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;use test;insert into counter values(123)&#x27;&quot;<br></code></pre></td></tr></table></figure><p>3，然后，我们观察Slave节点是否都同步到数据了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl -n mysql exec mysql-1 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter&#x27;&quot;  <br></code></pre></td></tr></table></figure><p>执行返回结果是，当看到输出结果，主从同步正常了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~]# kubectl -n mysql exec mysql-1 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter&#x27;&quot; <br>c<br>123<br></code></pre></td></tr></table></figure><h3 id="扩展从节点"><a href="#扩展从节点" class="headerlink" title="扩展从节点"></a>扩展从节点</h3><p>在有了StatefulSet以后，你就可以像Deployment那样，非常方便地扩展这个MySQL集群，比如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl -n mysql scale statefulset mysql  --replicas=3<br>statefulset.apps/mysql scaled<br>[root@VM-0-17-tlinux ~]# kubectl  get pods -n mysql<br>NAME      READY   STATUS     RESTARTS   AGE<br>mysql-0   2/2     Running    0          10m<br>mysql-1   2/2     Running    0          10m<br>mysql-2   0/2     Init:1/2   0          24s<br></code></pre></td></tr></table></figure><p>这时候，一个新的mysql-2就创建出来了，我们继续验证新扩容的节点是否都同步到主节点的数据。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">kubectl -n mysql exec mysql-2 -c mysql -- bash -c &quot;mysql -uroot -p123456 -e &#x27;use test;select * from counter&#x27;&quot;  <br></code></pre></td></tr></table></figure><p>当看到输出结果，主从同步正常了。也就是说从StatefulSet为我们新创建的mysql-2上，同样可以读取到之前插入的记录。也就是说，我们的数据备份和恢复，都是有效的</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes部署nacos服务</title>
      <link href="/post/7af4624e.html"/>
      <url>/post/7af4624e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kubernetes-部署-Nacos-集群"><a href="#Kubernetes-部署-Nacos-集群" class="headerlink" title="Kubernetes 部署 Nacos 集群"></a>Kubernetes 部署 Nacos 集群</h1><blockquote><p>官网文档：<a href="https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html">https://nacos.io/zh-cn/docs/use-nacos-with-kubernetes.html</a></p></blockquote><p>本文是基于腾讯云TKE容器服务集群搭建</p><h2 id="部署数据库"><a href="#部署数据库" class="headerlink" title="部署数据库"></a>部署数据库</h2><p><strong>1，数据库是NFS做数据化存储</strong>（或者CBS都可以）</p><p>需要注意： 镜像要使用nacos提供的数据库nacos&#x2F;nacos-mysql:5.7，自带的数据库创建完成后相关库和数据都已经导入，其中NFS替换成自己NFS实例，自建或者云上CFS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  generation: 1<br>  labels:<br>    k8s-app: nacos-mysql<br>    qcloud-app: nacos-mysql<br>  name: nacos-mysql<br>  namespace: nacos<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: nacos-mysql<br>      qcloud-app: nacos-mysql<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: nacos-mysql<br>        qcloud-app: nacos-mysql<br>    spec:<br>      containers:<br>      - env:<br>        - name: MYSQL_ROOT_PASSWORD<br>          value: root<br>        - name: MYSQL_DATABASE<br>          value: nacos<br>        - name: MYSQL_USER<br>          value: nacos<br>        - name: MYSQL_PASSWORD<br>          value: nacos<br>        image: nacos/nacos-mysql:5.7<br>        imagePullPolicy: IfNotPresent<br>        name: mysql<br>        resources:<br>          limits:<br>            cpu: 500m<br>            memory: 1Gi<br>          requests:<br>            cpu: 250m<br>            memory: 256Mi<br>        securityContext:<br>          privileged: false<br>        volumeMounts:<br>        - mountPath: /var/lib/mysql<br>          name: mysql-data<br>      dnsPolicy: ClusterFirst<br>      imagePullSecrets:<br>      - name: qcloudregistrykey<br>      restartPolicy: Always<br>      volumes:<br>      - name: mysql-data<br>        nfs:<br>          path: /nacos<br>          server: 192.168.1.6<br><br>---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nacos-mysql<br>  namespace: nacos<br>  labels:<br>    name: nacos-mysql<br>spec:<br>  ports:<br>  - port: 3306<br>    targetPort: 3306<br>  selector:<br>    k8s-app: nacos-mysql<br>    qcloud-app: nacos-mysql<br></code></pre></td></tr></table></figure><p>验证数据库可用性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-0-17-tlinux ~/nacos]# mysql -h172.18.250.54 -unacos -pnacos<br>MySQL [(none)]&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| nacos              |<br>+--------------------+<br>2 rows in set (0.01 sec)<br><br>MySQL [(none)]&gt; use nacos<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>MySQL [nacos]&gt; show tables;<br>+----------------------+<br>| Tables_in_nacos      |<br>+----------------------+<br>| config_info          |<br>| config_info_aggr     |<br>| config_info_beta     |<br>| config_info_tag      |<br>| config_tags_relation |<br>| group_capacity       |<br>| his_config_info      |<br>| permissions          |<br>| roles                |<br>| tenant_capacity      |<br>| tenant_info          |<br>| users                |<br>+----------------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="部署nacos"><a href="#部署nacos" class="headerlink" title="部署nacos"></a>部署nacos</h2><p><strong>1，创建链接mysql的配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: ConfigMap<br>metadata:<br>  name: nacos-cm<br>  namespace: nacos<br>data:<br>  mysql.host: &quot;172.18.253.36&quot;  #如果是K8S集群内数据库，可以使用服务名称<br>  mysql.db.name: &quot;nacos&quot;      #上面创建数据库是指的的库名称<br>  mysql.port: &quot;3306&quot;           #端口<br>  mysql.user: &quot;nacos&quot;          #用户<br>  mysql.password: &quot;nacos&quot;      #用户密码<br></code></pre></td></tr></table></figure><p><strong>2，创建nacos-headless 用于集群之间的链接</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nacos-headless<br>  namespace: nacos<br>  labels:<br>    app: nacos<br>  annotations:<br>    service.alpha.kubernetes.io/tolerate-unready-endpoints: &quot;true&quot;<br>spec:<br>  ports:<br>    - port: 8848<br>      name: server<br>      targetPort: 8848<br>  clusterIP: None<br>  selector:<br>    app: nacos<br>    <br>   <br></code></pre></td></tr></table></figure><p><strong>3，部署nacos服务</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: nacos<br>  namespace: nacos<br>spec:<br>  serviceName: nacos-headless<br>  replicas: 3<br>  template:<br>    metadata:<br>      labels:<br>        app: nacos<br>      annotations:<br>        pod.alpha.kubernetes.io/initialized: &quot;true&quot;<br>    spec:<br>      affinity:<br>        podAntiAffinity:<br>          requiredDuringSchedulingIgnoredDuringExecution:<br>            - labelSelector:<br>                matchExpressions:<br>                  - key: &quot;app&quot;<br>                    operator: In<br>                    values:<br>                      - nacos<br>              topologyKey: &quot;kubernetes.io/hostname&quot;<br>      containers:<br>        - name: k8snacos<br>          imagePullPolicy: Always<br>          image: nacos/nacos-server:latest<br>          resources:<br>            requests:<br>              memory: &quot;2Gi&quot;<br>              cpu: &quot;500m&quot;<br>          ports:<br>            - containerPort: 8848<br>              name: client<br>          env:<br>            - name: NACOS_REPLICAS<br>              value: &quot;3&quot;<br>            - name: MYSQL_SERVICE_HOST<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: nacos-cm<br>                  key: mysql.host<br>            - name: MYSQL_SERVICE_DB_NAME<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: nacos-cm<br>                  key: mysql.db.name<br>            - name: MYSQL_SERVICE_PORT<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: nacos-cm<br>                  key: mysql.port<br>            - name: MYSQL_SERVICE_USER<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: nacos-cm<br>                  key: mysql.user<br>            - name: MYSQL_SERVICE_PASSWORD<br>              valueFrom:<br>                configMapKeyRef:<br>                  name: nacos-cm<br>                  key: mysql.password<br>            - name: MODE<br>              value: &quot;cluster&quot;<br>            - name: NACOS_SERVER_PORT<br>              value: &quot;8848&quot;<br>            - name: PREFER_HOST_MODE<br>              value: &quot;hostname&quot;<br>            - name: NACOS_SERVERS<br>              value: &quot;nacos-0.nacos-headless.nacos.svc.cluster.local:8848 nacos-1.nacos-headless.nacos.svc.cluster.local:8848 nacos-2.nacos-headless.nacos.svc.cluster.local:8848&quot;<br>  selector:<br>    matchLabels:<br>      app: nacos<br>      <br>      <br></code></pre></td></tr></table></figure><p><strong>4，创建公网类型CLB的service（可选）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: v1<br>kind: Service<br>metadata:<br>  annotations:<br>    service.kubernetes.io/service.extensiveParameters: &#x27;&#123;&quot;AddressIPVersion&quot;:&quot;IPV4&quot;,&quot;ZoneId&quot;:&quot;ap-chongqing-1&quot;&#125;&#x27;<br>  name: nacos<br>  namespace: nacos<br>spec:<br>  externalTrafficPolicy: Cluster<br>  ports:<br>  - name: 8848-8848-tcp<br>    port: 8848<br>    protocol: TCP<br>    targetPort: 8848<br>  selector:<br>    app: nacos<br>  sessionAffinity: None<br>  type: LoadBalancer<br><br></code></pre></td></tr></table></figure><p><strong>5，创建公网访问的ingress（可选）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: networking.k8s.io/v1beta1<br>kind: Ingress<br>metadata:<br>  annotations:<br>    ingress.cloud.tencent.com/direct-access: &quot;false&quot;<br>  name: nacos-ingress<br>  namespace: nacos<br>spec:<br>  rules:<br>  - host: nacos.dev.cc<br>    http:<br>      paths:<br>      - backend:<br>          serviceName: nacos<br>          servicePort: 8848<br>        path: /nacos<br></code></pre></td></tr></table></figure><h2 id="nacos使用"><a href="#nacos使用" class="headerlink" title="nacos使用"></a>nacos使用</h2><p><strong>1，使用service访问 或者ingress进行访问</strong></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220826004712494.png" alt="image-20220826004712494"></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes中pod数据存储</title>
      <link href="/post/76f3febd.html"/>
      <url>/post/76f3febd.html</url>
      
        <content type="html"><![CDATA[<h2 id="POD如何使用节点磁盘"><a href="#POD如何使用节点磁盘" class="headerlink" title="POD如何使用节点磁盘"></a>POD如何使用节点磁盘</h2><p>K8S中，容器container在运行过程中，会产生一些日志，临时文件，如果没有任何限制的话，会写满POD所在节点磁盘空间，从而会影响对应节点 已经节点上其他POD应用，</p><p> 容器的<strong>临时存储，例如 emptyDir</strong>，位于目录&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods 下 </p><blockquote><p>通过如下命令可以查询到集群POD所对应的POD_ID</p><p>kubectl get pods -o custom-columns&#x3D;podName:.metadata.name,podIP:.status.podIP,podStatus:.status.phase,nodeIP:.status.hostIP,Pod_ID:.metadata.uid</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-249-47-tlinux /var/lib/kubelet/pods]# kubectl get pods -o custom-columns=podName:.metadata.name,podIP:.status.podIP,podStatus:.status.phase,nodeIP:.status.hostIP,Pod_ID:.metadata.uid<br>podName                   podIP        podStatus   nodeIP          Pod_ID<br>centos-74cd685986-rcfqk   10.200.0.5   Running     172.30.249.47   9ad30306-f6cd-49eb-a279-cd58201be8c3<br><br>[root@VM-249-47-tlinux /var/lib/kubelet/pods]# <br>[root@VM-249-47-tlinux /var/lib/kubelet/pods]# tree  9ad30306-f6cd-49eb-a279-cd58201be8c3<br>9ad30306-f6cd-49eb-a279-cd58201be8c3   #pod的 uid<br>├── containers                         # pod 里面的container 容器<br>│   ├── busybox                        #容器1<br>│   │   └── 21efdec2<br>│   └── centos                         #容器2<br>│       └── 64bbf490<br>├── etc-hosts                          # 命名空间的Host文件<br>├── plugins<br>│   └── kubernetes.io~empty-dir<br>│       ├── wrapped_cm<br>│       │   └── ready<br>│       ├── wrapped_default-token-7llnd<br>│       │   └── ready<br>│       └── wrapped_secret<br>│           └── ready<br>└── volumes                                           # Pod的卷<br>    ├── kubernetes.io~configmap                       # ConfigMap类型的卷<br>    │   └── cm<br>    │       └── app -&gt; ..data/app<br>    ├── kubernetes.io~qcloud-cbs                      #CBS类型的数据卷<br>    │   └── pvc-137607ae-974d-4c25-90dc-efc3c2a6c5a8  #PV名称，对应POD里面挂载点<br>    │       └── lost+found<br>    └── kubernetes.io~secret                          #Secret类型的卷<br>        ├── default-token-7llnd<br>        │   ├── ca.crt -&gt; ..data/ca.crt<br>        │   ├── namespace -&gt; ..data/namespace<br>        │   └── token -&gt; ..data/token<br>        └── secret<br>            └── password -&gt; ..data/password<br><br>17 directories, 11 files<br></code></pre></td></tr></table></figure><p><strong>持久卷的挂载点</strong>也位于&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;pods 下，但是<strong>不会导致存储空间的消耗</strong>。</p><p>容器的日志，存放在&#x2F;var&#x2F;log&#x2F;pods 目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@VM-249-47-tlinux /var/log/pods]# ls -lrt  | grep centos<br>drwxr-xr-x 4 root root 4096 Aug  7 18:23 default_centos-74cd685986-rcfqk_9ad30306-f6cd-49eb-a279-cd58201be8c3<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209031845790.png" alt="1659868302215"></p><blockquote><p>目录命名方式是：命名空间_POD名称_POD-UID</p><p>9ad30306-f6cd-49eb-a279-cd58201be8c3 这个指的就是POD的uid</p></blockquote><p>日志是软链接到&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;容器ID&#x2F;容器ID-json.log</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209031846679.png" alt="1659868600279"></p><p> 使用 Docker 时，<strong>容器的 rootfs</strong>位于&#x2F;var&#x2F;lib&#x2F;docker 下，具体位置取决于存储驱动。 </p><h2 id="pod驱逐机制"><a href="#pod驱逐机制" class="headerlink" title="pod驱逐机制"></a>pod驱逐机制</h2><blockquote><p>K8S官方驱逐机制可以参考文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/node-pressure-eviction/">https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/node-pressure-eviction/</a></p></blockquote><h3 id="磁盘容量不足触发的驱逐"><a href="#磁盘容量不足触发的驱逐" class="headerlink" title="磁盘容量不足触发的驱逐"></a>磁盘容量不足触发的驱逐</h3><p>​      当不可压缩资源（内存、磁盘）不足时，节点上的 Kubelet 会尝试驱逐掉某些 Pod，以释放资源，防止整个系统受到影响。</p><p>其中，磁盘资源不足的信号来源有两个：</p><ol><li>imagefs：容器运行时用作存储镜像、可写层的文件系统</li><li>nodefs：Kubelet 用作卷、守护进程日志的文件系统</li></ol><p>当 imagefs 用量到达驱逐阈值，Kubelet 会删除所有未使用的镜像，释放空间。</p><p>当 nodefs 用量到达阈值，Kubelet 会选择性的驱逐 Pod（及其容器）来释放空间。</p><h3 id="本地临时存储触发的驱逐"><a href="#本地临时存储触发的驱逐" class="headerlink" title="本地临时存储触发的驱逐"></a>本地临时存储触发的驱逐</h3><p>K8S 支持设置每个 Pod 可以使用的临时存储的 request&#x2F;limit，驱逐行为可以更具有针对性。如果 Pod 使用了超过限制的本地临时存储，Kubelet 将设置驱逐信号，触发 Pod 驱逐流程：</p><ol><li>对于容器级别的隔离，如果一个容器的可写层、日志占用磁盘超过限制，则 Kubelet 标记 Pod 为待驱逐</li><li>对于 Pod 级别的隔离，Pod 总用量限制，是每个容器限制之和。如果各容器用量之和+Pod 的 emptyDir 卷超过 Pod 总用量限制，标记 Pod 为待驱逐</li></ol><h3 id="从编排层限制"><a href="#从编排层限制" class="headerlink" title="从编排层限制"></a>从编排层限制</h3><p>从 K8S 1.8 开始，支持本地临时存储（local ephemeral storage），ephemeral 的意思是，数据的持久性（durability）不做保证。临时存储可能 Backed by 本地 Attach 的可写设备，或者内存。</p><p>Pod 可以使用本地临时存储来作为暂存空间，或者存放缓存、日志。Kubelet 可以利用本地临时存储，将 emptyDir 卷挂载给容器。Kubelet 也使用<strong>本地临时存储来保存节点级别的容器日志、容器镜像、容器的可写层</strong>。</p><p>Kubelet 会将日志写入到你配置好的日志目录，默认 <code>/var/log</code>。其它文件默认都写入到 <code>/var/lib/kubelet</code>。在典型情况下，这两个目录可能都位于宿主机的 rootfs 之下。</p><p>Kubernetes 支持跟踪、保留&#x2F;限制 Pod 能够使用的本地临时存储的总量。</p><h4 id="限制-Pod-用量"><a href="#限制-Pod-用量" class="headerlink" title="限制 Pod 用量"></a>限制 Pod 用量</h4><p>打开特性开关：<code>LocalStorageCapacityIsolation</code>，可以限制每个 Pod 能够使用的临时存储的总量。</p><p>注意：以内存为媒介（tmpfs）的 emptyDir，其用量计入容器内存消耗，而非本地临时存储消耗。</p><p>使用类似限制内存、CPU 用量的方式，限制本地临时存储用量：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">spec.containers[].resources.limits.ephemeral-storage<br>spec.containers[].resources.requests.ephemeral-storage<br></code></pre></td></tr></table></figure><p> 单位可以是 E, P, T, G, M, K，或者 Ei, Pi, Ti, Gi, Mi, Ki（1024）。 </p><p> 示例   容器最多使用 4GiB 的本地临时存储 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  labels:<br>    k8s-app: centos-dubug<br>    qcloud-app: centos-dubug<br>  name: centos-dubug<br>  namespace: default<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      k8s-app: centos-dubug<br>      qcloud-app: centos-dubug<br>  template:<br>    metadata:<br>      labels:<br>        k8s-app: centos-dubug<br>        qcloud-app: centos-dubug<br>    spec:<br>      containers:<br>      - args:<br>        - -c<br>        - sleep  36000<br>        command:<br>        - /bin/sh<br>        image: ccr.ccs.tencentyun.com/v_cjweichen/centos:latest<br>        imagePullPolicy: Always<br>        name: centos<br>        resources:<br>          limits:<br>            cpu: 200m<br>            ephemeral-storage: 4Gi<br>            memory: 256Mi<br>          requests:<br>            cpu: 100m<br>            ephemeral-storage: 4Gi<br>            memory: 64Mi<br>        securityContext:<br>          privileged: false<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装NodeJS</title>
      <link href="/post/fe4ed47c.html"/>
      <url>/post/fe4ed47c.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux安装NodeJS"><a href="#Linux安装NodeJS" class="headerlink" title="Linux安装NodeJS"></a>Linux安装NodeJS</h2><blockquote><p>Node.js  是一个基于Chrome V8 引擎 JavaScript 运行时环境， <a href="https://nodejs.org/zh-cn/download/">nodejs 官网</a></p></blockquote><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><strong>1，可以在官网控制台下载上传至服务器</strong></p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/202209031802065.png" alt="image-20220409115051104"></p><p><strong>2，或者使用命令直接下载</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@xxx ~/nodejs]# wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz   // 下载<br>[root@xxx ~/nodejs]# tar xf  node-v16.14.2-linux-x64.tar.xz        // 解压<br>[root@xxx ~/nodejs]# cd nnode-v16.14.2-linux-x64/                  // 进入解压目录<br></code></pre></td></tr></table></figure><blockquote><p> <a href="https://nodejs.org/dist/">历史版本下载</a>  </p></blockquote><h3 id="使用RZ上传到服务器并解压"><a href="#使用RZ上传到服务器并解压" class="headerlink" title="使用RZ上传到服务器并解压"></a>使用RZ上传到服务器并解压</h3><blockquote><p>Linux的sz和rz命令，可使用yum命令安装：yum install -y lrzsz</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@xxx ~/nodejs]# pwd<br>/root/nodejs<br>[root@xxx ~/nodejs]# ls -lrt<br>total 21428<br>-rw-rw-rw- 1 root root 21941244 Apr  9 11:52 node-v16.14.2-linux-x64.tar.xz<br>[root@xxx ~/nodejs]# tar -xvf node-v16.14.2-linux-x64.tar.xz <br>[root@xxx ~/nodejs]# cd /usr/local/<br>[root@xxx /usr/local]# ls<br>bin  etc  games  include  lib  lib64  libexec  lost+found  qcloud  sa  sbin  share  src<br>[root@xxx /usr/local]# mv /root/nodejs/node-v16.14.2-linux-x64 .<br>[root@xxx /usr/local]# mv node-v16.14.2-linux-x64/ nodejs <br></code></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><strong>方式一：环境变量</strong></p><p>　1）、加入环境变量，在 &#x2F;etc&#x2F;profile 文件末尾增加配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vi /etc/profile<br>export PATH=$PATH:/usr/local/nodejs/bin<br></code></pre></td></tr></table></figure><p>　2）、执行命令使配置文件生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">source /etc/profile<br></code></pre></td></tr></table></figure><p><strong>方式二：软链接方式</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">ln -s /usr/local/nodejs/bin/npm /usr/local/bin/<br>ln -s /usr/local/nodejs/bin/node /usr/local/bin/<br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">[root@xxx /usr/local]# node -v<br>v16.14.2<br>[root@xxx /usr/local]# npm -v<br>8.5.0<br></code></pre></td></tr></table></figure><h3 id="Npm-更换淘宝镜像"><a href="#Npm-更换淘宝镜像" class="headerlink" title="Npm 更换淘宝镜像"></a>Npm 更换淘宝镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm config set registry https://registry.npm.taobao.org<br>npm install<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter基本使用</title>
      <link href="/post/265fa930.html"/>
      <url>/post/265fa930.html</url>
      
        <content type="html"><![CDATA[<h2 id="Front-matter-说明"><a href="#Front-matter-说明" class="headerlink" title="Front-matter 说明"></a>Front-matter 说明</h2><p>Front-matter 是 markdown 文件最上方以 —  分隔的区域，用于指定个别文件的变量。</p><ul><li>Page Front-matter  用于页面配置</li><li>Post Front-matter  用于文章页配置</li></ul><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>如果你不想你的文章被处理，你可以将 Front-Matter 中的<code>layout:</code> 设为 <code>false</code> 。</p></blockquote><h2 id="Butterfly-Front-matter"><a href="#Butterfly-Front-matter" class="headerlink" title="Butterfly  Front-matter"></a>Butterfly  Front-matter</h2><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title:<br>date:<br>updated:<br>tags:<br>categories:<br>keywords:<br>description:<br>top_img:<br>comments:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>copyright:<br>copyright_author:<br>copyright_author_href:<br>copyright_url:<br>copyright_info:<br>mathjax:<br>katex:<br>aplayer:<br>highlight_shrink:<br>aside:<br>---<br></code></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标籤</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false&#x2F;图片地址&#x2F;留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章连结链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page:  false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title:<br>date:<br>updated:<br>type:<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:<br>#############################################<br>---<br><br></code></pre></td></tr></table></figure><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标籤、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly主题</title>
      <link href="/post/e56702c9.html"/>
      <url>/post/e56702c9.html</url>
      
        <content type="html"><![CDATA[<p><strong>写在前言</strong></p><blockquote><p>本文主要记录下Hexo使用butterfly主题优化的一些操作，便于后续可寻可查，首先感谢butterfly主题官方提供者</p></blockquote><h2 id="butterfly主题"><a href="#butterfly主题" class="headerlink" title="butterfly主题"></a>butterfly主题</h2><blockquote><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-melody官方介绍 </a></p><p>If you are in Mainland China, you can download in <a href="https://gitee.com/immyw/hexo-theme-butterfly.git">Gitee</a></p></blockquote><h3 id="下载安装主题"><a href="#下载安装主题" class="headerlink" title="下载安装主题"></a>下载安装主题</h3><p>1，在你的 <strong>Hexo 根目</strong>使用git可以直接下载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><p>或者NPM安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm i hexo-theme-butterfly<br></code></pre></td></tr></table></figure><p>2，在hexo工作文件夹的根配置文件_config.yml中设置主题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Extensions<br>## Plugins: https://hexo.io/plugins/<br>## Themes: https://hexo.io/themes/<br>theme: butterfly<br></code></pre></td></tr></table></figure><p>3，执行如下命令测试看是否安装成功（需要在hexo主题根目录执行）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo d<br>hexo server<br></code></pre></td></tr></table></figure><h3 id="主题页面设置"><a href="#主题页面设置" class="headerlink" title="主题页面设置"></a>主题页面设置</h3><h4 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h4><ol><li>前往你的 Hexo 博客的根目录</li><li>输入 hexo new page tags</li><li>你会找到source&#x2F;tags&#x2F;index.md这个文件</li><li>修改这个文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo new page tags<br></code></pre></td></tr></table></figure><p>​5. 添加添加 type: “tags”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title: 标签<br>date: 2022-08-23 00:17:54<br>type: &quot;tags&quot;<br>---<br></code></pre></td></tr></table></figure><h4 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h4><ol><li><p>前往你的 Hexo 博客的根目录</p></li><li><p>输入hexo new page categories</p></li><li><p>你会找到source&#x2F;categories&#x2F;index.md这個文件</p></li><li><p>修改这个文件：</p></li><li><p>记得添加 type: “categories”</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#hexo new page categories<br>---<br>title: 分类<br>date: 2022-08-23 00:20:08<br>type: &quot;categories&quot;<br>---<br></code></pre></td></tr></table></figure><h4 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h4><ol><li><p>前往你的 Hexo 博客的根目錄</p></li><li><p>输入 hexo new page link</p></li><li><p>你会找到source&#x2F;link&#x2F;index.md這個文件</p></li><li><p>修改这个文件：</p></li><li><p>記得添加 type: “link”</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#hexo new page link<br>---<br>title: 友情链接<br>date: 2022-08-23 00:23:12<br>type: &quot;link&quot;<br>---<br></code></pre></td></tr></table></figure><p>   6，友情链接添加</p><p>在Hexo博客目录中的source&#x2F;_data（如果沒有 _data 文件夾，请自行创建），创建一个文件link.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">- class_name: 友情链接<br>  class_desc: 记录生活，学习点滴<br>  link_list:<br>    - name: Hexo<br>      link: https://hexo.io/zh-tw/<br>      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg<br>      descr: 快速、简单且强调的博客框架<br><br>- class_name: 网站<br>  class_desc: 值得推荐的网站<br>  link_list:<br>    - name: Youtube<br>      link: https://www.youtube.com/<br>      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png<br>      descr: 视频网站<br>    - name: Weibo<br>      link: https://www.weibo.com/<br>      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png<br>      descr: 中国最大社交分享平台<br>    - name: Twitter<br>      link: https://twitter.com/<br>      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png<br>      descr: 社交分享平台<br></code></pre></td></tr></table></figure><p>class_name 和 class_desc 支持 html 格式，如不需要，也可以留空。</p><h4 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h4><p>图库页面是一个普通的页面挂在图片信息概念，具体构建如下所示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#hexo new page photos<br># 在source/photos/index.md文件中：使用标签外挂galleryGroup<br><br>&lt;div class=&quot;gallery-group-main&quot;&gt;<br>&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁紙&#x27; &#x27;/photos/wallpaper&#x27; https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/3.jpg %&#125;<br>&#123;% galleryGroup &#x27;动漫&#x27; &#x27;关于动漫的图片&#x27; &#x27;/photos/comic&#x27;    https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/timg3.jpg %&#125;<br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><h5 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h5><p>子也面也是普通的也面，你只需要hexo new  page xxxxx 创建你的也面就行</p><p>然后使用标签外挂 gallery，具体用法请查看对应的內容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 创建子页面<br>hexo new page daily<br><br># 在指定source/daily/index.md文件中外挂gallery<br>&#123;% gallery %&#125;<br>![](https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/timg.jpg)<br>![](https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220826125722620.png)<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure><h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>主題內置了一個简单的404页面，可在設置中开启</p><p>在主题_config.yml配置文件，查看404配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># A simple 404 page<br>error_404:<br>  enable: true<br>  subtitle: &#x27;Page Not Found&#x27;<br>  background: https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220823004052578.png<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220823004052578.png" alt="image-20220823004052578"></p><h4 id="其他页面"><a href="#其他页面" class="headerlink" title="其他页面"></a>其他页面</h4><p>同理，使用相同的方式创建，我这边创建有如下页面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo new page   archives  #归档<br>hexo new page   messageboard #留言板<br>hexo new page   music     #音乐<br>hexo new page   movies    #电影<br>hexo new page   game      #游戏<br>hexo new page   book      #书籍<br>hexo new page   about     #关于我<br></code></pre></td></tr></table></figure><h3 id="站点主题设置"><a href="#站点主题设置" class="headerlink" title="站点主题设置"></a>站点主题设置</h3><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>修改站点<strong>Hexo根目录</strong>配置文件 _config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">默认是 en<br><br>主題支持三种语音<br><br>default(en)<br>zh-CN (简体中文)<br>zh-TW (繁体中文)<br></code></pre></td></tr></table></figure><h4 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h4><p>修改站点各种资料，例如标题、副标题和邮箱等个人资料，请修改博客<strong>根目录</strong>的_config.yml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Site<br>title: &#x27;JingWei Chen&#x27;<br>subtitle: &#x27;&#x27;<br>description: &#x27;抬头，微笑，你好&#x27;<br>keywords: kubernetes<br>author: JingWei Chen<br>language: zh-CN<br>timezone: &#x27;Asia/Shanghai&#x27;<br></code></pre></td></tr></table></figure><h4 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h4><p>修改主题的配置文件位于themes&#x2F;butterfly&#x2F;_config.yaml</p><blockquote><p>前面列 文字可自行更改，默认是英文的，用户可以根据需求修改成中文 ，示例如下</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">menu:<br>   首页: / || fas fa-home<br>   归档: /archives/ || fas fa-archive<br>   标签: /tags/ || fas fa-tags<br>   分类: /categories/ || fas fa-folder-open<br>   留言板: /messageboard/ || fa fa-paper-plane<br>   友链: /link/ || fas fa-link<br>   娱乐 || fas fa-list||hide:<br>     音乐: /music/  || fas fa-music<br>     电影: /movies/ || fas fa-video<br>     游戏: /game/   || fas fa-gamepad<br>     相册: /photos/ || fa fa-camera-retro<br>     电子书: /book/ ||  fa fa-book<br>   关于我: /about/ || fas fa-heart<br></code></pre></td></tr></table></figure><p>必须是 &#x2F;xxx&#x2F;，后面||分开，然后写图标名，如果不希望显示图标，图标名可不写。</p><p>默认子目录是展开，如果你想要隐藏，在子目录里面添加 hide 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">List||fas fa-list||hide:<br>  Music: /music/ || fas fa-music<br>  Movie: /movies/ || fas fa-video<br></code></pre></td></tr></table></figure><h4 id="副主题设置"><a href="#副主题设置" class="headerlink" title="副主题设置"></a>副主题设置</h4><p>如果没设置副标题，上面的<code>description：</code>签名，就是显示在主页面。而设置的话，<code>签名</code>自动不显示，<code>副标题</code>出现。</p><p>修改 主題配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># the subtitle on homepage (主页subtitle)<br>subtitle:<br>  enable: true<br>  # Typewriter Effect (打字效果)<br>  effect: true<br>  # Effect Speed Options (打字效果速度參數)<br>  startDelay: 200 # time before typing starts in milliseconds<br>  typeSpeed: 100 # type speed in milliseconds<br>  backSpeed: 100 # backspacing speed in milliseconds<br>  # loop (循环字)<br>  loop: true<br>  # source 調用第三方服務<br>  # source: false 關閉調用<br>  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/<br>  # source: 2  調用一句網（簡體） http://yijuzhan.com/<br>  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/<br>  # subtitle 會先顯示 source , 再顯示 sub 的內容<br>  source: false<br>  # 如果打开打字效果，subtitle 只會顯示 sub 的第一行文字<br>  sub:<br>    - As long as willing to learn, it will be able to learn.<br>    - 只要愿意学习，就一定能够学会<br>    - Take learning as a kind of living habits.<br>    - 把学习当成一种生活习惯<br></code></pre></td></tr></table></figure><h5 id="副标题字体大小颜色"><a href="#副标题字体大小颜色" class="headerlink" title="副标题字体大小颜色"></a>副标题字体大小颜色</h5><p>在<code>\themes\butterfly\source\css\_layout</code>中的<code>head.styl</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#site-subtitle<br>    color: var(--white)   #此处修改为白色<br>    font-size: 1.05em     #字体大小<br><br>    +minWidth768()<br>      font-size: 1.55em   #字体大小<br></code></pre></td></tr></table></figure><h4 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h4><p>图片可以使用<code>网上的图片</code>(即使用该<code>图片链接</code>)，也可以使用<code>\themes\butterfly\source\img</code>下的图片。</p><h5 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Favicon（网站图标）<br>favicon: /img/favicon.png<br></code></pre></td></tr></table></figure><h5 id="个人资料头像"><a href="#个人资料头像" class="headerlink" title="个人资料头像"></a>个人资料头像</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Avatar (头像)<br>avatar:<br>  img: /img/avatar.png<br>  effect: false<br></code></pre></td></tr></table></figure><h5 id="首页面图片"><a href="#首页面图片" class="headerlink" title="首页面图片"></a>首页面图片</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># The banner image of home page (首页的横幅图像)<br>index_img: /img/index_img.jpg<br></code></pre></td></tr></table></figure><h5 id="子标签页图片"><a href="#子标签页图片" class="headerlink" title="子标签页图片"></a>子标签页图片</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># The banner image of archive page<br>archive_img: /img/tag.jpg<br></code></pre></td></tr></table></figure><ol><li>主页的顶部图可以在<code>_config.yml</code>设置<code>index_img</code></li><li>&#96;&#96;archives<code>页的顶部图可以在</code>_config.yml<code>设置</code>archive_img&#96;</li><li>其他<code>page页</code>的顶部图可以在各自的md页面设置<code>front-matter</code>中的<code>top_img</code></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">favicon: /img/favicon.png<br>avatar:<br>  img: /img/tit.png<br>  effect: false<br>index_img: /img/index_img.jpg<br>default_top_img: /img/tag.jpg #这个推荐：不加入可能部分标签页不出现图片<br>archive_img: /img/tag.jpg<br>tag_img: /img/tag.jpg<br>category_img: /img/tag.jpg<br></code></pre></td></tr></table></figure><h5 id="文章列表图片"><a href="#文章列表图片" class="headerlink" title="文章列表图片"></a>文章列表图片</h5><p>修改 主題配置文件 &#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">cover:<br>  # display the cover or not (是否显示文章封面)<br>  index_enable: true<br>  aside_enable: true<br>  archives_enable: true<br>  # the position of cover in home page (封面显示的位置)<br>  # left/right/both<br>  position: both<br>  default_cover:<br>  <br>文章封面设置：<br>一个:<br> default_cover: https://xxxx.jpg<br>多个:<br>此时会随机选择一张<br>  default_cover:<br>     - https://i.loli.net/2020/05/01/xxxxxx.jpg<br>or文章内<br></code></pre></td></tr></table></figure><h5 id="图片查看大图"><a href="#图片查看大图" class="headerlink" title="图片查看大图"></a>图片查看大图</h5><p>修改 主題配置文件 &#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><p>这是两种<code>方式</code>，<code>只能选择一个</code> 或者 <code>两个都不选</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># medium-zoom<br># https://github.com/francoischalifour/medium-zoom<br>medium_zoom: false<br><br># fancybox<br># http://fancyapps.com/fancybox/3/<br>fancybox: true<br></code></pre></td></tr></table></figure><h5 id="图片慢加载"><a href="#图片慢加载" class="headerlink" title="图片慢加载"></a>图片慢加载</h5><p>1.新增<code>hexo-lazyload-image</code>模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install hexo-lazyload-image --save<br></code></pre></td></tr></table></figure><p>2.在主目录配置文件<code>_config.yml</code>增加配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">lazyload:<br>  enable: true<br>  loadingImg: /img/loading.gif<br></code></pre></td></tr></table></figure><p>这个就是图片没加载出来的时候，出现一个动图转转转。</p><h5 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h5><p>可开启图片Figcaption描述文字显示</p><p>优先显示的 title 属性，然後是 alt 属性</p><p>修改 主题配置文件 ，默认false，这里保持默认不修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">photofigcaption: false<br></code></pre></td></tr></table></figure><h4 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h4><h5 id="1，代码高亮主题"><a href="#1，代码高亮主题" class="headerlink" title="1，代码高亮主题"></a>1，代码高亮主题</h5><blockquote><p>Butterfly 支持6种代码高亮样式，修改主題配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">darker<br>pale night<br>light<br>ocean<br>mac<br>mac light<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">highlight_theme: light<br></code></pre></td></tr></table></figure><h5 id="2，代码复制"><a href="#2，代码复制" class="headerlink" title="2，代码复制"></a>2，代码复制</h5><blockquote><p>主題支持代码复制功能，修改主题配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">highlight_copy: true<br></code></pre></td></tr></table></figure><h5 id="3，-代码展开和折叠"><a href="#3，-代码展开和折叠" class="headerlink" title="3， 代码展开和折叠"></a>3， 代码展开和折叠</h5><blockquote><p>在默认情況下，代码框自动展开，可设置是否所有代码框都关闭专题，点开&gt;可展开代码，修改 主題配置文件</p></blockquote><ul><li>true 全部代码框不展开，需点击&gt;打开</li><li>false 代码框展开，有&gt;点击按鈕</li><li>none 不显示&gt;按鈕</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">highlight_shrink: true #代码框不展开，需点击&gt;打开<br></code></pre></td></tr></table></figure><blockquote><p>你也可以在post&#x2F;page也对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当主题配置文件中的 highlight_shrink 设为true时，可在front-matter添加highlight_shrink: false来单独配置文章展开代码框。</p><p>当主题配置文件中的 highlight_shrink 设为false时，可在front-matter添加highlight_shrink: true来单独配置文章收縮代码框。</p></blockquote><h5 id="4，代码换行"><a href="#4，代码换行" class="headerlink" title="4，代码换行"></a>4，代码换行</h5><p>在默认情況下，Hexo 在编译的時候不会实现代码自动換行。如果你不希望在代码块的区域里有橫向滾动條的話，那麼你可以考慮开启這個功能。</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">code_word_wrap: true   #我这边设置的是false<br></code></pre></td></tr></table></figure><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置博客<strong>根目录</strong>文件_config.yml，將line_number改成false:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">highlight:<br>  enable: true<br>  line_number: false # &lt;- 改这里<br>  auto_detect: false<br>  tab_replace:<br></code></pre></td></tr></table></figure><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo博客<strong>根目录</strong> 配置文件_config.yml，將line_number改成false:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">prismjs:<br>  enable: false<br>  preprocess: true<br>  line_number: false # &lt;- 改这里<br>  tab_replace: &#x27;&#x27;<br></code></pre></td></tr></table></figure><h5 id="5，代码高度设置"><a href="#5，代码高度设置" class="headerlink" title="5，代码高度设置"></a>5，代码高度设置</h5><blockquote><p>3.7.0 及以上支持</p><p>注意：單位是 px，直接添加數字，如 200</p><p>实际限制高度为 highlight_height_limit + 30 px 多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点時，出現展开按鈕，展开沒內容。</p><p>不適用于隐藏後的代码块（ css 設置 display: none）</p></blockquote><p>可配置代码高度限制，超出的部分会隐藏，並显示展开按鈕。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">highlight_height_limit: false # unit: px<br></code></pre></td></tr></table></figure><h4 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h4><p>Butterfly支持 font-awesome v6图标.</p><p>书写格式 图标名：url || 描述性文字(可以选择使用<code>fa fa-xxx</code>图标，也可以选择使用<code>阿里iconfont</code>图)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># social settings (社交图标设置)<br># formal:<br>#   icon: link || the description<br>social:<br>   fab fa-github: https://github.com/chen1900s || Github<br>   fas fa-envelope: chen1900s@163.com || Email<br>   fab fa-qq:  tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=728831102&amp;website=www.oicqzone.com || QQ<br>   <br></code></pre></td></tr></table></figure><h4 id="主页文章节选"><a href="#主页文章节选" class="headerlink" title="主页文章节选"></a>主页文章节选</h4><p>因为主题UI的关系，主页文章節選只支持自动節選和文章页description。</p><p>在butterfly里，有四種可供選擇</p><ol><li><p>description： 只显示description</p></li><li><p>both： 優先選擇description，如果沒有配置description，則显示自动節選的內容</p></li><li><p>auto_excerpt：只显示自动節選</p></li><li><p>false： 不显示文章內容</p></li></ol><p>修改主题配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">index_post_content:<br>  method: 2<br>  length: 500 # if you set method to 2 or 3, the length need to config<br></code></pre></td></tr></table></figure><h4 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h4><blockquote><p>如果不要显示顶部图，可直接配置 disable_top_img:  true<br>其它页面 （tags&#x2F;categories&#x2F;自建页面）和 文章页 的 top_img ，請到對應的 md 页面設置front-matter中的top_img<br>以上所有的 top_img 可配置以下值</p></blockquote><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td>默认的 top_img，当主页的 top_img  沒有配置时，会显示default_top_img</td></tr><tr><td>archive_img</td><td>归档页面的 top_img</td></tr><tr><td>tag_img</td><td>tag    标签页面的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag  子页面的 top_img，可配置每個 tag 的  top_img</td></tr><tr><td>category_img</td><td>category子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每個 category 的 top_img</td></tr></tbody></table><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">【推荐】hexo-generator-index从 2.0.0 开始，已經支持文章置頂功能。你可以直接在文章的front-matter区域里添加sticky: 1属性来把這篇文章置頂。數值越大，置頂的優先級越大。<br></code></pre></td></tr></table></figure><h4 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h4><p>文章的markdown文档上，在Front-matter添加cover，并填上要显示的图片地址。如果不配置cover，可以設置显示默认的cover，如果不想在首页头示cover,可以设置为false，</p><p>修改 主題配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">cover:<br>  # 是否显示文章封面<br>  index_enable: true<br>  aside_enable: true<br>  archives_enable: true<br>  # 封面显示的位置<br>  # 三个值可配置 left , right , both<br>  position: both<br>  # 当沒有设置cover時，默认的封面显示<br>  default_cover: <br></code></pre></td></tr></table></figure><p>当配置多张图片时候  会随机选择一张作为cover.，此时的写法为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">default_cover:<br>  - https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png<br>  - https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg2.png<br>  - https://fastly.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg3.png<br></code></pre></td></tr></table></figure><h4 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h4><h5 id="生成文章唯一链接"><a href="#生成文章唯一链接" class="headerlink" title="生成文章唯一链接"></a>生成文章唯一链接</h5><p>Hexo的默认文章链接格式是年，月，日，标题这种格式来生成的。如果你的标题是中文的话，那你的URL链接就会包含中文。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">permalink: :year/:month/:day/:title<br></code></pre></td></tr></table></figure><p>前往你的Hexo博客根目录，打开cmd命令窗口执行npm install hexo-abbrlink –save</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><p>修改站点配置文件_config.yml中permalink属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">permalink: :year/:month/:day/:title/<br>#修改为<br>permalink: post/:abbrlink.html # post为自定义前缀<br>abbrlink:<br>  alg: crc32   #算法： crc16(default) and crc32<br>  rep: hex     #进制： dec(default) and hex<br></code></pre></td></tr></table></figure><h5 id="文章meta显示"><a href="#文章meta显示" class="headerlink" title="文章meta显示"></a>文章meta显示</h5><p>这个选项是用来显示文章的相关信息的。</p><p>修改 主题配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">post_meta:<br>  page:<br>    date_type: both          # created or updated or both 主页文章日期是創建日或者更新日或都显示<br>    date_format: relative    # date/relative 显示日期還是相對日期<br>    categories: true         # true or false 主页是否显示分类<br>    tags: true               # true or false 主页是否显示標籤<br>    label: true              # true or false 显示描述性文字<br>  post:<br>    date_type: both           # created or updated or both 文章页日期是創建日或者更新日或都显示<br>    date_format: relative     # date/relative 显示日期還是相對日期<br>    categories: true          # true or false 文章页是否显示分類<br>    tags: true                # true or false 文章页是否显示標籤<br>    label: true               # true or false 显示描述性文字<br></code></pre></td></tr></table></figure><h5 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h5><p>為你的博客文章展示文章版权和许可协议。</p><p>修改主题配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">post_copyright:<br>  enable: true<br>  decode: false<br>  author_href:<br>  license: CC BY-NC-SA 4.0<br>  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/<br></code></pre></td></tr></table></figure><p>如果有文章（例如：转载文章）不需要显示，可以在文章Front-matter单独设置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">copyright: false<br></code></pre></td></tr></table></figure><p>从3.0.0开始，支持对单独文章设置版权信息，可以在文章Front-matter单独設置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">copyright_author: xxxx<br>copyright_author_href: https://xxxxxx.com<br>copyright_url: https://xxxxxx.com<br>copyright_info: 此文章版版权xxxxx所有，如有转载，请注明来自原作者<br></code></pre></td></tr></table></figure><h5 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h5><p>在你每篇文章的結尾，可以添加打賞按鈕。相關二維码可以自行配置。</p><p>對于沒有提供二維码的，可配置一張軟件的icon圖片，然後在link上添加相應的打賞鏈接。用户点擊圖片就会跳轉到鏈接去。</p><p>link可以不寫，会默认為圖片的鏈接。</p><p>修改 主題配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml  建议把img相关二维码文件替换成自己的二维码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">reward:<br>  enable: true<br>  QR_code:<br>    - img: /img/wechat.jpg<br>      link:<br>      text: 微信<br>    - img: /img/alipay.jpg<br>      link:<br>      text: 支付宝<br></code></pre></td></tr></table></figure><h5 id="TOC显示"><a href="#TOC显示" class="headerlink" title="TOC显示"></a>TOC显示</h5><p>在文章页，会有一一个目录，用于显示TOC。修改主题配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">toc:<br>  post: true<br>  page: false<br>  number: true<br>  expand: false<br>  style_simple: false # for post <br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>post</td><td>文章页是否显示 TOC</td></tr><tr><td>page</td><td>普通页面是否显示 TOC</td></tr><tr><td>number</td><td>是否显示章節數</td></tr><tr><td>expand</td><td>是否展开 TOC</td></tr><tr><td>style_simple</td><td>簡潔模式（側邊欄只显示 TOC, 只對文章页有效 ）</td></tr></tbody></table><h6 id="為特定的文章配置"><a href="#為特定的文章配置" class="headerlink" title="為特定的文章配置"></a>為特定的文章配置</h6><p>在你的文章md文件的頭部，加入toc_number和toc，並配置true或者false即可。</p><p>主題会優先判斷文章Ma</p><h5 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h5><p>相关文章推荐的原理是根据文章tags的比重来推荐</p><p>修改主題配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">related_post:<br>  enable: true<br>  limit: 6 # 显示推荐文章数目<br>  date_type: created # or created or updated 文章日期显示創建日或者更新日<br></code></pre></td></tr></table></figure><h5 id="文章錨点"><a href="#文章錨点" class="headerlink" title="文章錨点"></a>文章錨点</h5><p>开启文章錨点後，當你在文章页進行滾动時，文章鏈接会根據標題ID進行替換<br>(注意: 每替換一次，会留下一個歷史記錄。所以如果一篇文章有很多錨点的話，網页的歷史記錄会很多。)</p><p>修改 主題配置文件&#x2F;themes&#x2F;butterfly&#x2F;_config.yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># anchor<br># when you scroll in post , the url will update according to header id.<br>anchor: true<br></code></pre></td></tr></table></figure><h5 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h5><p>可設置是否显示文章过期提醒，以更新时间为基准。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Displays outdated notice for a post (文章過期提醒)<br>noticeOutdate:<br>  enable: true<br>  style: flat # style: simple/flat<br>  limit_day: 365 # When will it be shown<br>  position: top # position: top/bottom<br>  message_prev: It has been<br>  message_next: days since the last update, the content of the article may be outdated.<br><br>limit_day： 距離更新時間多少天才显示文章過期提醒<br>message_prev ： 天數之前的文字<br>message_next：天數之後的文字<br></code></pre></td></tr></table></figure><h5 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h5><p>在文章標題旁邊显示一個編輯按鈕，点擊会跳轉到對應的鏈接去，这里保持默认配置不设置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Post edit<br># Easily browse and edit blog source code online.<br>post_edit:<br>  enable: false<br>  # url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/<br>  # For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/<br>  url:<br><br></code></pre></td></tr></table></figure><h5 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h5><p>可设置分页的逻辑，也可以关闭分页显示，我这里设置的是1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># post_pagination (分页)<br># value: 1 || 2 || false<br># 1: The &#x27;next post&#x27; will link to old post  下一篇显示的是舊文章<br># 2: The &#x27;next post&#x27; will link to new post 下一篇显示的是新文章<br># false: disable pagination  关闭分页按鈕<br>post_pagination: 1<br><br></code></pre></td></tr></table></figure><h5 id="隐藏部分文章不在首页显示"><a href="#隐藏部分文章不在首页显示" class="headerlink" title="隐藏部分文章不在首页显示"></a>隐藏部分文章不在首页显示</h5><p>如果有些文章不想在主页显示，可以修改主题配置文件 themes&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug</p><p>添加了if article.hide !&#x3D;&#x3D; true这一行，然后这一行后全部需要按下tab缩进一层。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">mixin postUI(posts)<br>  each article , index in page.posts.data<br>    if article.hide !== true<br>      .recent-post-item<br></code></pre></td></tr></table></figure><p>修改文章在md文件的头部信息中添加hide: true，示例如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">title: Hexo搭建个人博客<br>tags: Hexo<br>categories: Hexo<br>keywords: hexo<br>hide: true  #添加这个<br></code></pre></td></tr></table></figure><h5 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h5><p>可配置网站是否可以复制、复制的內容是否添加版权信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># copy settings<br># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)<br>copy:<br>  enable: true<br>  copyright:<br>    enable: true<br>    limit_count: 50<br><br>#enable 是否开启網站複製權限<br>#copyright複製的內容後面加上版權信息<br>#enable     是否开启複製版權信息添加<br>#limit_count字數限制，當複製文字大于這個字數限制時，將在複製的內容後面加上版權信息<br></code></pre></td></tr></table></figure><h5 id="Footer页尾设置"><a href="#Footer页尾设置" class="headerlink" title="Footer页尾设置"></a>Footer页尾设置</h5><h6 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h6><p>since是一个来展示你站点起始时间的选项。它位于页面的最底部。</p><p>修改 主題配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">footer:<br>  owner:<br>    enable: true<br>    since: 2018<br></code></pre></td></tr></table></figure><h6 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h6><p>custom_text是一個給你用来在页腳自定义文本的选项。通常你可以在这里声明文本等。支持 HTML。</p><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">custom_text: Hi, welcome to my &lt;a href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!<br></code></pre></td></tr></table></figure><h6 id="页面底部-footer跳动的心"><a href="#页面底部-footer跳动的心" class="headerlink" title="页面底部 footer跳动的心"></a>页面底部 footer跳动的心</h6><p>编辑&#x2F;themes&#x2F;butterfly&#x2F;layout&#x2F;includes&#x2F;footer.pug文件</p><p>将以下内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;<br></code></pre></td></tr></table></figure><p>改为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear + &#x27; &#x27;&#125; &lt;i id=&quot;heartbeat&quot; class=&quot;fa fas fa-heartbeat&quot;&gt;&lt;/i&gt; $&#123;config.author&#125;<br></code></pre></td></tr></table></figure><p>将以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125; <br></code></pre></td></tr></table></figure><p>改为:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&amp;copy;$&#123;nowYear + &#x27; &#x27;&#125; &lt;i id=&quot;heartbeat&quot; class=&quot;fa fas fa-heartbeat&quot;&gt;&lt;/i&gt; $&#123;config.author&#125;<br></code></pre></td></tr></table></figure><p>将以下内容添加到 <head></head>标签内：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://fastly.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css&quot;&gt;<br></code></pre></td></tr></table></figure><h5 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h5><h6 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h6><p>简体繁体互换，右下角会有简繁转换按鈕。</p><p>修改主题的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Conversion between Traditional and Simplified Chinese (简繁转换)<br>translate:<br>  enable: true    # 2022 默认false<br>  # The text of a button<br>  default: 简<br>  # the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）<br>  defaultEncoding: 1<br>  # Time delay<br>  translateDelay: 0<br>  # The text of the button when the language is Simplified Chinese<br>  msgToTraditionalChinese: &#x27;繁&#x27;<br>  # The text of the button when the language is Traditional Chinese<br>  msgToSimplifiedChinese: &#x27;简&#x27;<br></code></pre></td></tr></table></figure><h6 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h6><p>右下角会有夜间模式按钮，修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># dark mode<br>darkmode:<br>  enable: true<br>  # dark mode和 light mode切换按钮<br>  button: true<br>  autoChangeMode: false<br></code></pre></td></tr></table></figure><h6 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h6><p>阅读模式下会去掉除文章外的内容，避免干扰阅读。只会出现在文章页面，右下角会有阅读模式按钮。</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Read Mode (阅读模式)<br>readmode: true<br></code></pre></td></tr></table></figure><h6 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )<br># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment<br># Don&#x27;t repeat 不要重复<br>rightside_item_order:<br>  enable: false<br>  hide: # readmode,translate,darkmode,hideAside<br>  show: # toc,chat,comment<br></code></pre></td></tr></table></figure><h5 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h5><h6 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h6><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏。</p><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">aside:<br>  enable: true<br>  hide: true<br>  button: true<br>  mobile: true # display on mobile<br>  position: right # left or right<br>  display:<br>    archive: true<br>    tag: true<br>    category: true<br>  card_author:<br>    enable: true<br>    description:<br>    button:<br>      enable: true<br>      icon: iconfont icon-CSDN           #fab fa-github<br>      text: My Blog<br>      link: https://blog.chen1900s.cn/<br>  card_announcement:<br>    enable: true<br>    content: 刚开始写博客，欢迎大家来吐槽<br>  card_recent_post:<br>    enable: true<br>    limit: 5 # if set 0 will show all<br>    sort: date # date or updated<br>    sort_order: # Don&#x27;t modify the setting unless you know how it works<br>  card_categories:<br>    enable: true<br>    limit: 8 # if set 0 will show all<br>    expand: none # none/true/false<br>    sort_order: # Don&#x27;t modify the setting unless you know how it works<br>  card_tags:<br>    enable: true<br>    limit: 40 # if set 0 will show all<br>    color: false<br>    sort_order: # Don&#x27;t modify the setting unless you know how it works<br>  card_archives:<br>    enable: true<br>    type: monthly # yearly or monthly<br>    format: MMMM YYYY # eg: YYYY年MM月<br>    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending<br>    limit: 8 # if set 0 will show all<br>    sort_order: # Don&#x27;t modify the setting unless you know how it works<br>  card_webinfo:<br>    enable: true<br>    post_count: true<br>    last_push_date: true<br>    sort_order: # Don&#x27;t modify the setting unless you know how it works<br></code></pre></td></tr></table></figure><h6 id="访问人数-UV-和-PV"><a href="#访问人数-UV-和-PV" class="headerlink" title="访问人数(UV 和 PV)"></a>访问人数(UV 和 PV)</h6><p>访问 busuanzi 的官方网站查看更多的介绍，修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">busuanzi:<br>  site_uv: true<br>  site_pv: true<br>  page_pv: true<br></code></pre></td></tr></table></figure><h6 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h6><p>网页已运行时间</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">runtimeshow:<br>  enable: true   #默认false<br>  publish_date: 9/9/2018 00:00:00<br>  ##网页开通时间<br>  #格式: 月/日/年 时间<br>  #也可以写成 年/月/日 时间<br></code></pre></td></tr></table></figure><h6 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h6><blockquote><p>最新评论只会在刷新时才会去读取，并不会实时变化</p><p>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分鐘。也就是説，调用后资料会存在 localStorage 里，10分鐘内刷新网站只会去 localStorage 读取资料。 10 分鐘期限一过，刷新页面时才会去调取 API 读取新的数据。（ 3.6.0 新增了 storage 配置，可自行配置缓存时间）</p></blockquote><p>在侧边栏显示最新评论板块</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Aside widget - Newest Comments<br>newest_comments:<br>  enable: true<br>  sort_order: # Don&#x27;t modify the setting unless you know how it works<br>  limit: 6<br>  storage: 10 # unit: mins, save data to localStorage<br>  avatar: true<br></code></pre></td></tr></table></figure><h6 id="自定义添加栏目"><a href="#自定义添加栏目" class="headerlink" title="自定义添加栏目"></a>自定义添加栏目</h6><p>标签外挂（Tag Plugins）</p><blockquote><p>标签外挂是Hexo独有的功能，并不是标準的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p></blockquote><h6 id="Follow-me信息修改"><a href="#Follow-me信息修改" class="headerlink" title="Follow me信息修改"></a>Follow me信息修改</h6><p>在主题配置文件修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">card_author:<br>  enable: true<br>  description:<br>  button:<br>    enable: true<br>    icon: fab fa-github<br>    text: my blog<br>    link: https://chen1900s.github.io/<br></code></pre></td></tr></table></figure><h6 id="公告信息"><a href="#公告信息" class="headerlink" title="公告信息"></a>公告信息</h6><p>在主题配置文件修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">card_announcement:<br>    enable: true<br>    content: This is my Blog  #修改此处<br></code></pre></td></tr></table></figure><h5 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h5><p>从3.0开始，Butterfly主题内置了多种在线聊天工具。你可以选择开启一种，方便你与访客的交流。这些工具都提供了一个按钮可以打开&#x2F;关闭聊天窗口。<br>主题也提供了一个集合主题特色的按钮来替换这些工具本身的按钮，这个聊天按钮将会出现在右下角里。<br>你只需要把chat_btn打开就行。</p><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Chat Button [recommend]<br># It will create a button in the bottom right corner of website, and hide the origin button<br>chat_btn: true  默认false<br></code></pre></td></tr></table></figure><p>为了不影响访客的体验，主题提供一个chat_hide_show配置，设为true后，使用工具提供的按钮时，只有向上滚动才会显示聊天按钮，向下滚动时会隐藏按钮。</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># The origin chat button is displayed when scrolling up, and the button is hidden when scrolling down<br>chat_hide_show: true<br></code></pre></td></tr></table></figure><h5 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h5><blockquote><p>只能选择一个分享服务商</p></blockquote><p>可以到addtoany查看使用説明</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sharejs:<br>  enable: true<br>  sites: facebook,twitter,wechat,weibo,qq  #想要显示的内容<br></code></pre></td></tr></table></figure><h5 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h5><blockquote><p>记得运行 hexo clean</p></blockquote><p>你需要安装 hexo-generator-search，根据它的文档去做相应配置</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install  hexo-generator-search  --save<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">local_search:<br>  enable: true<br>  labels:<br>    input_placeholder: Search for Posts<br>    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # 如果没有查到内容相关内容显示<br></code></pre></td></tr></table></figure><p>你需要安装 hexo-algolia或 hexo-algoliasearch. 根据它们的説明文档去做相应的配置。</p><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">algolia_search:<br>  enable: true <br>  hits:<br>    per_page: 6<br></code></pre></td></tr></table></figure><h6 id="分割线图标更换"><a href="#分割线图标更换" class="headerlink" title="分割线图标更换"></a>分割线图标更换</h6><p>将图标更换为“太空飞船”。</p><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hr_icon:<br>  enable: true<br>  icon: &#x27;\f197&#x27; # the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;<br>  icon-top: -10px<br></code></pre></td></tr></table></figure><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220823130546940.png" alt="image-20220823130546940"></p><h5 id="广告设置"><a href="#广告设置" class="headerlink" title="广告设置"></a>广告设置</h5><p>主题已集成谷歌广告（自动广告）</p><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Google Adsense (谷歌广告)<br>google_adsense:<br>  enable: false<br>  auto_ads: true<br>  js: https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js<br>  client:<br>  enable_page_level_ads: true<br><br></code></pre></td></tr></table></figure><h5 id="美化-x2F-特效"><a href="#美化-x2F-特效" class="headerlink" title="美化&#x2F;特效"></a>美化&#x2F;特效</h5><h6 id="自定义主题色"><a href="#自定义主题色" class="headerlink" title="自定义主题色"></a>自定义主题色</h6><p>可以修改大部分UI颜色</p><p>修改 主题配置文件，比如：</p><blockquote><p>颜色值必须被双引号包裹，就像”#000”而不是#000。否则将会在构建的时候报错，我这里保持默认配置不做修改</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># theme_color:<br>#   enable: true<br>#   main: &quot;#49B1F5&quot;<br>#   paginator: &quot;#00c4b6&quot;<br>#   button_hover: &quot;#FF7242&quot;<br>#   text_selection: &quot;#00c4b6&quot;<br>#   link_color: &quot;#99a9bf&quot;<br>#   meta_color: &quot;#858585&quot;<br>#   hr_color: &quot;#A4D8FA&quot;<br>#   code_foreground: &quot;#F47466&quot;<br>#   code_background: &quot;rgba(27, 31, 35, .05)&quot;<br>#   toc_color: &quot;#00c4b6&quot;<br>#   blockquote_padding_color: &quot;#49b1f5&quot;<br>#   blockquote_background_color: &quot;#49b1f5&quot;<br>#   scrollbar_color: &quot;#49b1f5&quot;<br>#   meta_theme_color_light: &quot;ffffff&quot;<br>#   meta_theme_color_dark: &quot;#0d0d0d&quot;<br><br></code></pre></td></tr></table></figure><h6 id="页面背景"><a href="#页面背景" class="headerlink" title="页面背景"></a>页面背景</h6><p>默认显示白色，可设置图片或者颜色 修改主题配置文件<code>_config.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># The formal of image: url(http://xxxxxx.com/xxx.jpg)<br>background: &#x27;#efefef&#x27;   #默认留空的<br></code></pre></td></tr></table></figure><p>可以自定义</p><p>在<code>\Butterfly\source\css\</code>目录下创建css文件 <code>backgound.css</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#web_bg &#123;<br>  background: -webkit-linear-gradient(<br>    0deg,<br>    rgba(247, 149, 51, 0.1) 0,<br>    rgba(243, 112, 85, 0.1) 15%,<br>    rgba(239, 78, 123, 0.1) 30%,<br>    rgba(161, 102, 171, 0.1) 44%,<br>    rgba(80, 115, 184, 0.1) 58%,<br>    rgba(16, 152, 173, 0.1) 72%,<br>    rgba(7, 179, 155, 0.1) 86%,<br>    rgba(109, 186, 130, 0.1) 100%<br>  );<br>  background: -moz-linear-gradient(<br>    0deg,<br>    rgba(247, 149, 51, 0.1) 0,<br>    rgba(243, 112, 85, 0.1) 15%,<br>    rgba(239, 78, 123, 0.1) 30%,<br>    rgba(161, 102, 171, 0.1) 44%,<br>    rgba(80, 115, 184, 0.1) 58%,<br>    rgba(16, 152, 173, 0.1) 72%,<br>    rgba(7, 179, 155, 0.1) 86%,<br>    rgba(109, 186, 130, 0.1) 100%<br>  );<br>  background: -o-linear-gradient(<br>    0deg,<br>    rgba(247, 149, 51, 0.1) 0,<br>    rgba(243, 112, 85, 0.1) 15%,<br>    rgba(239, 78, 123, 0.1) 30%,<br>    rgba(161, 102, 171, 0.1) 44%,<br>    rgba(80, 115, 184, 0.1) 58%,<br>    rgba(16, 152, 173, 0.1) 72%,<br>    rgba(7, 179, 155, 0.1) 86%,<br>    rgba(109, 186, 130, 0.1) 100%<br>  );<br>  background: -ms-linear-gradient(<br>    0deg,<br>    rgba(247, 149, 51, 0.1) 0,<br>    rgba(243, 112, 85, 0.1) 15%,<br>    rgba(239, 78, 123, 0.1) 30%,<br>    rgba(161, 102, 171, 0.1) 44%,<br>    rgba(80, 115, 184, 0.1) 58%,<br>    rgba(16, 152, 173, 0.1) 72%,<br>    rgba(7, 179, 155, 0.1) 86%,<br>    rgba(109, 186, 130, 0.1) 100%<br>  );<br>  background: linear-gradient(<br>    90deg,<br>    rgba(247, 149, 51, 0.1) 0,<br>    rgba(243, 112, 85, 0.1) 15%,<br>    rgba(239, 78, 123, 0.1) 30%,<br>    rgba(161, 102, 171, 0.1) 44%,<br>    rgba(80, 115, 184, 0.1) 58%,<br>    rgba(16, 152, 173, 0.1) 72%,<br>    rgba(7, 179, 155, 0.1) 86%,<br>    rgba(109, 186, 130, 0.1) 100%<br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><p>修改配置文件<code>_config.yml</code>的引入方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">inject:<br>  head:<br>     - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/background.css&quot;&gt;<br>  bottom:<br></code></pre></td></tr></table></figure><p>如果背景色不生效，设置<code>_config.yml</code>，需将background:设置成#efefef</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># The formal of image: url(http://xxxxxx.com/xxx.jpg)<br>background: &#x27;#efefef&#x27;<br></code></pre></td></tr></table></figure><h6 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h6><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Mouse click effects: fireworks (鼠标点击效果: 煙火特效)<br>fireworks:<br>  enable: false<br>  zIndex: 9999 # -1 or 9999<br>  mobile: false<br><br># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)<br>click_heart:<br>  enable: false<br>  mobile: false<br><br># Mouse click effects: words (鼠標點擊效果: 文字)<br>ClickShowText:<br>  enable: false<br>  text:<br>    # - I<br>    # - LOVE<br>    # - YOU<br>  fontSize: 15px<br>  random: false<br>  mobile: false<br></code></pre></td></tr></table></figure><h6 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h6><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Typewriter Effect (打字效果)<br># https://github.com/disjukr/activate-power-mode<br>activate_power_mode:<br>  enable: false<br>  colorful: true # open particle animation (冒光特效)<br>  shake: true #  open shake (抖动特效)<br>  mobile: false<br></code></pre></td></tr></table></figure><h6 id="页面背景特效"><a href="#页面背景特效" class="headerlink" title="页面背景特效"></a>页面背景特效</h6><p>有三种，根据自己喜好选择开启，将<code>enable</code>设置为true就可以</p><blockquote><p>静态彩带</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># canvas_ribbon (靜止彩帶背景)<br># See: https://github.com/hustcc/ribbon.js<br>canvas_ribbon:<br>  enable: false<br>  size: 150<br>  alpha: 0.6<br>  zIndex: -1<br>  click_to_change: true<br>  mobile: true<br> #点击页面，彩带会进行变化。<br></code></pre></td></tr></table></figure><blockquote><p>动态彩带</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Fluttering Ribbon (动態彩帶)<br>canvas_fluttering_ribbon:<br>  enable: true<br>  mobile: true<br>  <br>#这个彩带可以动态变换<br></code></pre></td></tr></table></figure><blockquote><p>自动吸附</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># canvas_nest<br># https://github.com/hustcc/canvas-nest.js<br>canvas_nest:<br>  enable: false<br>  color: &#x27;0,0,255&#x27; #线条颜色, default: &#x27;0,0,0&#x27;; <br>  opacity: 0.7 # 线条的不透明度 (0~1), default: 0.5.<br>  zIndex: -1 # z-index property of the background, default: -1.<br>  count: 99 # 线条数量, default: 99.<br>  mobile: false<br></code></pre></td></tr></table></figure><h6 id="Snackbar-弹窗"><a href="#Snackbar-弹窗" class="headerlink" title="Snackbar 弹窗"></a>Snackbar 弹窗</h6><p>修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Snackbar (Toast Notification 彈窗)<br># position 彈窗位置<br># 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right<br>snackbar:<br>  enable: false  #默认就是false<br>  position: top-right<br>  bg_light: &#x27;#49b1f5&#x27; # light 背景下的样式<br>  bg_dark: &#x27;#121212&#x27; # dark 背景下的样式<br>  <br>#开启后，在你设置的位置会有可爱的小弹窗出现<br></code></pre></td></tr></table></figure><h6 id="底部设置"><a href="#底部设置" class="headerlink" title="底部设置"></a>底部设置</h6><p>修改主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Footer Settings<br># --------------------------------------<br>footer:<br>  owner:<br>    enable: true<br>    since: 2018<br>  custom_text: welcome to my &lt;a href=&quot;https://blog.chen1900s.cn&quot;&gt;blog&lt;/a&gt;!<br>  copyright: false # Copyright of theme and framework 默认为true<br>  ICP: # Chinese ICP License   #最后一句<br>    enable: true<br>    url: http://www.beian.gov.cn<br>    text: 豫ICP备20001029号<br>    icon: /img/icp.png<br></code></pre></td></tr></table></figure><h5 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h5><p>开启评论需要在<code>butterfly.yml</code>—<code>comments</code>—<code>use</code>中填写你需要的评论。</p><p>支持<code>双评论显示</code>，只需要配置两个评论（第一个为<code>默认</code>显示）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">comments:<br>  use:<br>   - Valine<br>  # - Disqus    <br>  text: true <br>  lazyload: false<br>  count: false <br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>use</td><td>使用的评论（填写的评论首字母需要大写。最多支持两个，不需要就留空）</td></tr><tr><td>text</td><td>是否显示评论服务商的名字</td></tr><tr><td>lazyload</td><td>是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启lazyload后，评论数将不显示）</td></tr><tr><td>count</td><td>是否在文章顶部显示评论数</td></tr></tbody></table><p><code>注意</code>：双评论不能是<code>Disqus</code> 和<code>Disqusjs</code> 一起，由于其共用同一个 <code>ID</code>，会出错。</p><p>以下是举例的我在用的：<code>Valine</code></p><p>1.在<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a>中注册账号，并进入。</p><p>2.创建应用</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220823175230964.png" alt="image-20220823175230964"></p><p>3.创建成功后，进入<code>设置</code></p><p>4.进入<code>应用Keys</code></p><p><code>应用Keys</code>中有<code>AppID</code>和<code>AppKey</code>，这两个需要填写到你的<code>butterfly.yml</code>中</p><p>5.修改 主题配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># valine<br># https://valine.js.org<br>valine:<br>  appId:              #  app id<br>  appKey:              # app key<br>  pageSize: 10<br>  avatar: monsterid <br>  lang: zh-CN <br>  placeholder: Please leave your footprints p<br>  guest_info: nick,mail,link <br>  recordIP: true <br>  serverURLs: <br>  bg: <br>  emojiCDN: <br>  enableQQ: true <br>  requiredFields: nick,mail<br></code></pre></td></tr></table></figure><h5 id="音乐Aplayer"><a href="#音乐Aplayer" class="headerlink" title="音乐Aplayer"></a>音乐Aplayer</h5><h6 id="安装-hexo-tag-aplayer-插件"><a href="#安装-hexo-tag-aplayer-插件" class="headerlink" title="安装 hexo-tag-aplayer 插件"></a>安装 hexo-tag-aplayer 插件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install --save hexo-tag-aplayer<br></code></pre></td></tr></table></figure><p>关闭 asset_inject</p><p>由于需要全局都插入 aplayer 和 meting 资源，为了防止插入重复的资源，需要把 asset_inject 设为 false</p><h6 id="在-Hexo-的配置文件中"><a href="#在-Hexo-的配置文件中" class="headerlink" title="在 Hexo 的配置文件中"></a>在 Hexo 的配置文件中</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">aplayer:<br>  meting: true<br>  asset_inject: false<br></code></pre></td></tr></table></figure><h6 id="开启主题的-aplayerInject"><a href="#开启主题的-aplayerInject" class="headerlink" title="开启主题的 aplayerInject"></a>开启主题的 aplayerInject</h6><p>在主题的配置文件中，enable 设为 true 和 per_page 设为 true</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Inject the css and script (aplayer/meting)<br>aplayerInject:<br>  enable: true<br>  per_page: true<br></code></pre></td></tr></table></figure><p>插入 Aplayer html为了适配 hexo-tag-aplayer，主题内置的 Meting js 仍为 1.2 版本，并非最新的 2.x 版本。</p><p>Aplayer html 例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;7607717868&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-listFolded=&quot;false&quot; data-order=&quot;random&quot; data-lrctype=&quot;1&quot; data-preload=&quot;none&quot; data-autoplay=&quot;false&quot; muted&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>把 aplayer代码 插入到主题配置文件的 inject.bottom 去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">inject:<br>  head:<br>  bottom:<br>       - &lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;7607717868&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-listFolded=&quot;false&quot; data-order=&quot;random&quot; data-lrctype=&quot;1&quot; data-preload=&quot;none&quot; data-autoplay=&quot;false&quot; muted&gt;&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p>运行 Hexo 就可以看到网页左下角出现了 Aplayer</p><p>最后，如果你想切换页面时，音乐不会中断。请把主题配置文件的 pjax 设为 true</p><p>音乐页面也显示播放列表，可以直接在&#x2F;source&#x2F;music&#x2F;目录下的index.md 里面填入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">---<br>title: 音乐<br>date: 2018-08-24 11:06:40<br>type: music<br>---<br>&#123;% meting &quot;7607717868&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#ad7a86&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;<br></code></pre></td></tr></table></figure><h5 id="电影movies"><a href="#电影movies" class="headerlink" title="电影movies"></a>电影movies</h5><p>电影界面使用了插件 hexo-butterfly-douban，使用方法请参考插件的文档。</p><blockquote><p><a href="https://github.com/jerryc127/butterfly-plugins/tree/main/hexo-butterfly-douban">hexo-butterfly-douban介绍</a>   </p></blockquote><h6 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install hexo-butterfly-douban --save<br></code></pre></td></tr></table></figure><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>將下面的配置寫入站點的配置文件 <code>_config.yml</code> 里(不是主題的配置文件).</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">##电影<br>douban:<br>  user: 261805469<br>  builtin: true<br>  book:<br>    title: &#x27;书籍&#x27;<br>    quote: &#x27;读书不是为了拿文凭或者发财，而是成为一个温度，有情趣，会思考的人！&#x27;<br>    meta: true<br>    comments: true<br>    top_img: https://cccccc.png<br>    aside: true<br>    path: book<br>    limit:<br>  movie:<br>    title: &#x27;电影&#x27;<br>    quote: &#x27;一杯奶茶，一个人，一张票，一场电影&#x27;<br>    meta: true<br>    comments: true<br>    top_img: https://cccccc.png<br>    aside: true<br>    path: movies<br>    limit:<br>  game:<br>    title: &#x27;游戏&#x27;<br>    quote: &#x27;不好意思，目前还没有找到好玩的游戏，有推荐的吗&#x27;<br>    meta: true<br>    comments: true<br>    top_img: https://cccccc.png<br>    aside: true<br>    path: game<br>    limit:<br>  timeout: 10000<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/post/ec7d7221.html"/>
      <url>/post/ec7d7221.html</url>
      
        <content type="html"><![CDATA[<p><strong>简单介绍</strong></p><blockquote><p>一直想拥有一个属于自己的博客主站，便于记录平时工作中遇到一技术问题 或是生活琐事，于是在网上搜索了如何搭建博客，了解到hexo使用的人还挺多，那就行动起来，在网上一边搜教程一边搭建，本站是基于Hexo+butterfly 的，感谢网上各种前辈的分享，让我学习了很多</p></blockquote><h2 id="Hexo基本搭建"><a href="#Hexo基本搭建" class="headerlink" title="Hexo基本搭建"></a>Hexo基本搭建</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。一个命令即可部署到 Github页面、 Giteee、 Heroku等平台，强大的APl,可无限扩展,拥有数百个主题和插件供用户自主安装 </p><blockquote><p><a href="https://hexo.io/zh-cn/docs/">hexo官方文档</a></p></blockquote><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><blockquote><p>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本</p></blockquote><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于国内用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载 </p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB&#x2F;RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a>。</li></ul><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><p>也可以使用cnpm</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install -g cnpm --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>以上安装前提的应用程序安装完成后，就可以使用npm进行安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install -g hexo-cli  #或者： cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>查看是否安装成功和对应安装的版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo -v<br>#若有正常版本输出表示安装成功<br></code></pre></td></tr></table></figure><h3 id="搭建博客主站"><a href="#搭建博客主站" class="headerlink" title="搭建博客主站"></a>搭建博客主站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo init myblog<br></code></pre></td></tr></table></figure><p>初始化完后，切换到博客主目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">cd  myblog<br>npm install   #或者cnpm install<br></code></pre></td></tr></table></figure><p>查看当前目录文件</p><blockquote><p>_config.landscape.yml<br>themes                   #主题文件夹。Hexo 会根据主题来生成静态页面。<br>scaffolds                #模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>source                   # 资源文件夹是存放用户资源的地方<br>public<br>package-lock.json<br>package.json             #应用程序信息<br>_config.yml               #网站配置信息，后续主站配置需要在这个配置文件进行修改<br>db.json<br>node_modules<br>.deploy_git<br>.github</p></blockquote><h3 id="启动服务站点"><a href="#启动服务站点" class="headerlink" title="启动服务站点"></a>启动服务站点</h3><p>hexo 三板斧命令 启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo cl    #完整命令是hexo clean   清理缓存文件<br>hexo g     #hexo generate    用于生成静态文件<br>hexo s     #hexo server     命令用于启动本地服务<br></code></pre></td></tr></table></figure><p>正常输出表示启动成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">INFO  Validating config<br>INFO <br>  ===================================================================<br><br>      #####  #    # ##### ##### ###### #####  ###### #      #   #<br>      #    # #    #   #     #   #      #    # #      #       # #<br>      #####  #    #   #     #   #####  #    # #####  #        #<br>      #    # #    #   #     #   #      #####  #      #        #<br>      #    # #    #   #     #   #      #   #  #      #        #<br>      #####   ####    #     #   ###### #    # #      ######   #<br><br>                            4.4.0<br>  ===================================================================<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br><br></code></pre></td></tr></table></figure><p>然后通过  <a href="http://localhost:4000/">http://localhost:4000/</a>   可以正常访问（使用的是默认主题）</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/1660970724356.png" alt="1660970724356"></p><h3 id="GitHub上建站访问"><a href="#GitHub上建站访问" class="headerlink" title="GitHub上建站访问"></a>GitHub上建站访问</h3><p>将 Hexo 博客部署到 GitHub Pages 上，如果还没有github账号的，需要先去注册账号，具体如何注册，这里就不做介绍了，</p><h4 id="新建github仓库"><a href="#新建github仓库" class="headerlink" title="新建github仓库"></a>新建github仓库</h4><p>仓库名称限制了为你的：用户名+.github.io。我这里使用的是我自己用户名 chen1900s</p><p><img src="https://chen1900s-1257020962.cos.ap-chongqing.myqcloud.com/my-blog/image/image-20220831181326723.png" alt="image-20220831181326723"></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git init<br>git add README.md<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote add origin https://github.com/chen1900s/chen1900s.github.io.git<br>git push -u origin main<br>#已有仓库<br>git remote add origin https://github.com/chen1900s/chen1900s.github.io.git<br>git branch -M main<br>git push -u origin main<br></code></pre></td></tr></table></figure></blockquote><h4 id="推送站点到github"><a href="#推送站点到github" class="headerlink" title="推送站点到github"></a>推送站点到github</h4><p>1，安装hexo上传插件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install hexo-deployer-git --save<br>或者<br>cnpm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>2，修改hexo配置文件指定仓库路径</p><p>可在hexo博客主目录文件夹中直接打开文件，也可通过vim直接编辑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">vim _config.yml <br>#找到<br>deploy:<br>  type: git<br>  repo: https://github.com/chen1900s/chen1900s.github.io.git<br>  branch: master <br></code></pre></td></tr></table></figure><p>3，运行命令（执行命令时候需要在博客主目录执行）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy`<br></code></pre></td></tr></table></figure><blockquote><p>需要配置github ssh公私钥访问 </p></blockquote><h4 id="主站访问"><a href="#主站访问" class="headerlink" title="主站访问"></a>主站访问</h4><p>输入你的仓库名称,即可访问成功。</p><p>https:&#x2F;&#x2F; username.github.io  </p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。</p><p>到GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p><p>这里我选择butterfly 主题进行配置</p><blockquote><p><a href="https://butterfly.js.org/">butterfly 官方主题</a></p></blockquote><p>按照各自的主题文档上面一步步操作即可。</p><p> 一般步骤： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1、下载解压主题 或者使用命令行<br>2、放到主题包themes文件夹下面<br>3、在hero配置文件_config.yml中修改为喜欢主题的名字<br>4、hero server启动即可访问<br></code></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在你的<strong>Hexo 根目</strong>录里执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><p>或者手动下载下来 上传到博客根目录</p><h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><p>修改 <strong>Hexo 根目录</strong>下的 _config.yml，把主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Extensions<br>## Plugins: https://hexo.io/plugins/<br>## Themes: https://hexo.io/themes/<br>theme: butterfly     <br></code></pre></td></tr></table></figure><p>修改完成后，重启服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#1，清理<br>hexo clean<br>#2 构建静态文件<br>hexo g<br>#3，上传至仓库<br>hexo deploy<br></code></pre></td></tr></table></figure><h4 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h4><p>在<strong>Hexo根目录</strong>文件夹中打开终端 ，输入如下命令创建文章，hexo会在source文件夹下创建一个markdowm的文件。这就是你要编写的文章。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo new “这里填入文章的标题”<br></code></pre></td></tr></table></figure><p> 用软件typora打开直接编写文章 ， 在上传更新到github上立马能够查看到。 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">#1，清理<br>hexo clean<br>#2 构建静态文件<br>hexo g<br>#3，上传至仓库<br>hexo deploy<br></code></pre></td></tr></table></figure><p>草稿箱</p><blockquote><p>有时候我们需要先写成草稿，而暂时不发布出去。draft page就可以满足我们的要求，我们的网站上是看不到草稿文件的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">//新建草稿文件<br>hexo new draft b<br><br>//预览草稿文件<br>hexo server --draft<br><br>//发布草稿hexo publish <br></code></pre></td></tr></table></figure><h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><p>有时我们不满足主题自由的一些页面，希望自己添加一些标题页面。</p><p>我们可以新建页面，新建页面则会在hexo的source中新建该页面文件并生成md文件，这就是你要编辑的博客页了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo new page &quot;resouces&quot;<br></code></pre></td></tr></table></figure><p>然后打开主题的配置文件<code>_config.yml</code>，在菜单属性<code>menu</code>中的添加如下（注意不是Hexo的配置文件）</p><p>将页面路径联接到页面上去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">菜单自定义名称：/生成的页面名称<br></code></pre></td></tr></table></figure><p>具体见我下一篇文章的<a href="https://blog.chen1900s.cn/post/e56702c9.html">butterfly主题优化</a></p><p><strong>写在最后</strong></p><p>感谢占用您的时间阅读，如果有不对的地方随时吐槽</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
